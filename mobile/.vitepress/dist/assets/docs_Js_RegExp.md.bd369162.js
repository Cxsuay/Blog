import{_ as n,c as s,o as a,a as t}from"./app.9a3fef87.js";const p='{"title":"Js - RegExp","description":"","frontmatter":{},"headers":[{"level":2,"title":"修饰符 - 特殊字符","slug":"修饰符-特殊字符"},{"level":2,"title":"基础","slug":"基础"},{"level":3,"title":"声明创建 正则表达式","slug":"声明创建-正则表达式"},{"level":3,"title":"符号 等的解析","slug":"符号-等的解析"},{"level":2,"title":"正则匹配的小技巧 - 尽量从小范围做起，然后再往 大范围的去匹配。 先具体化 然后再拼凑","slug":"正则匹配的小技巧-尽量从小范围做起，然后再往-大范围的去匹配。-先具体化-然后再拼凑"},{"level":2,"title":"方法","slug":"方法"},{"level":2,"title":"断言匹配 - 其实就是 正则的条件判断。","slug":"断言匹配-其实就是-正则的条件判断。"},{"level":2,"title":"延伸","slug":"延伸"}],"relativePath":"docs/Js/RegExp.md","lastUpdated":1632732114000}',e={},o=[t('<h1 id="js-regexp" tabindex="-1">Js - RegExp <a class="header-anchor" href="#js-regexp" aria-hidden="true">#</a></h1><h2 id="修饰符-特殊字符" tabindex="-1">修饰符 - 特殊字符 <a class="header-anchor" href="#修饰符-特殊字符" aria-hidden="true">#</a></h2><ul><li>模式 - 修饰符</li></ul><table><thead><tr><th style="text-align:left;">g</th><th>全局匹配 - <strong>找所有</strong>。</th></tr></thead><tbody><tr><td style="text-align:left;">i</td><td>忽略大小写</td></tr><tr><td style="text-align:left;">m</td><td>多行 - 匹配的每一行的开始和结束是由 <code>\\n</code>和<code>\\r</code>分割的</td></tr><tr><td style="text-align:left;">u</td><td>Unicode - 可以用来查找中文的 模式 - 当然可以使用 排除法来查找中文 <strong><code>/\\p{sc=Han}/gu</code> 查找中文。</strong></td></tr><tr><td style="text-align:left;">y</td><td>粘性匹配 - y模式只匹配 连续的内容。 可以改变 <code>lastIndex</code>属性 来改变匹配的起始位置。</td></tr></tbody></table><ul><li>特殊字符</li></ul><table><thead><tr><th><code>.</code></th><th>除换行外的任意单个字符 - <code>\\n</code> <code>\\r</code> <code>\\u2028</code> <code>\\u2029</code> 这几个换行符除外</th></tr></thead><tbody><tr><td><code>\\d</code></td><td><strong>数字</strong> - 等价于 <code>[0-9]</code></td></tr><tr><td><code>\\D</code></td><td><strong>除了数字之外的任意字符</strong> - 等价于 <code>[^0-9]</code></td></tr><tr><td><code>\\w</code></td><td>匹配 <strong>字母 数字 下划线</strong> - 等价于 <code>[A-Za-z0-9_]</code></td></tr><tr><td><code>\\W</code></td><td>匹配 <strong>除了 <code>\\W</code> 匹配之外的字符</strong> - 等价于 <code>[^A-Za-z0-9_]</code></td></tr><tr><td><code>\\s</code></td><td>匹配 <strong>空白符</strong> 包括 空格 制表符 换页符 换行符 和 其他 Unicode 空格</td></tr><tr><td><code>\\S</code></td><td>匹配 <strong>除了 <code>\\s</code> 匹配之外的字符</strong></td></tr><tr><td><code>\\t</code></td><td>匹配一个 <strong>水平制表符tab</strong></td></tr><tr><td><code>\\r</code></td><td>匹配一个<strong>回车符</strong></td></tr><tr><td><code>\\n</code></td><td>匹配一个<strong>换行符</strong></td></tr><tr><td><code>\\v</code></td><td>匹配一个 <strong>垂直制表符</strong></td></tr><tr><td><code>\\f</code></td><td>匹配一个<strong>换页符</strong></td></tr><tr><td><code>[\\b]</code></td><td>匹配一个 <strong>推格符</strong></td></tr><tr><td><code>\\0</code></td><td>匹配一个 <strong>NUL字符</strong> 不要再次后面跟小数点</td></tr><tr><td><code>\\cX</code></td><td><code>X</code> 是 A - Z 的一个字母。匹配字符串中的一个控制字符。</td></tr><tr><td><code>\\x*hh*</code></td><td>匹配编码为 <code>*hh*</code> （两个十六进制数字）的字符。</td></tr><tr><td><code>\\uhhhh</code></td><td>匹配 Unicode 值为 <code>*hhhh*</code> （四个十六进制数字）的字符。</td></tr></tbody></table><ul><li>字符合集</li></ul><table><thead><tr><th><code>[xyz]</code></th><th>一个字符集合，也叫字符组。匹配集合中的任意一个字符。也可以使用连字符<code>-</code>来指定范围<br>eg: [abcd] 等价于[a-d]。</th></tr></thead><tbody><tr><td><code>[^xyz]</code></td><td>反义字符组。 表示匹配 不在括号内的字符。（就是除外）。也可以使用连字符<code>-</code></td></tr></tbody></table><ul><li>边界</li></ul><table><thead><tr><th><code>^</code></th><th>匹配开始。</th></tr></thead><tbody><tr><td><code>$</code></td><td>匹配结尾</td></tr><tr><td><code>\\b</code></td><td>匹配一个零宽单词边界。如一个字母和一个空格之间。</td></tr><tr><td><code>\\B</code></td><td>匹配一个 非零宽 单词编辑。 如两个字母之间或者两个空格之间。 ...不太懂这个定义。</td></tr></tbody></table><ul><li>数量词</li></ul><table><thead><tr><th><code>x*</code></th><th>匹配 0 个或者多个</th></tr></thead><tbody><tr><td><code>x+</code></td><td>匹配一个或者多个 等价于 <code>{1,}</code></td></tr><tr><td><code>x?</code></td><td>匹配 0个或者1一个</td></tr><tr><td><code>x*?</code>&amp;&amp;<code>x+?</code></td><td>表示匹配的最小可能。 <code>/&quot;.*?&quot;/</code>匹配&#39;foo bar&#39; = &#39;foo&#39; 没有<code>?</code> 则等于 &#39;foo bar&#39;</td></tr><tr><td>`x</td><td>y`</td></tr><tr><td><code>x{n}</code></td><td><code>n</code>是一个正整数。 x 连续出现n次的匹配</td></tr><tr><td><code>x{n,}</code></td><td><code>n</code> 是一个正整数。 x 至少出现 n 次的匹配</td></tr><tr><td><code>x{n,m}</code></td><td><code>n</code>和<code>m</code>是正整数。 x 至少出现 n 次 最多出现 m 次。 n到m次</td></tr></tbody></table><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-hidden="true">#</a></h2><h3 id="声明创建-正则表达式" tabindex="-1">声明创建 正则表达式 <a class="header-anchor" href="#声明创建-正则表达式" aria-hidden="true">#</a></h3><ul><li><p>字面量创建</p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>\n<span class="token comment">// 字面量形式 不可以检测变量  字面量写在字符串里面然后 eval 是可以实现的</span>\n<span class="token comment">// 因为 eval 会执行 字符串里面的内容 eg: eval(&#39;1+2&#39;) // 3 eval(&#39;1&#39;+&#39;2&#39;); // 12(number类型)</span>\n<span class="token keyword">let</span> b1 <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>\n<span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">/</span>$<span class="token punctuation">{</span>b1<span class="token punctuation">}</span><span class="token operator">/</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;acbs&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true - 只是因为 eval 会执行字符串。 不过不推荐使用 eval</span>\n</code></pre></div></li><li><p>对象创建</p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// par1 - 要匹配的字符串  par2 - 模式</span>\nb2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;aiu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div></li></ul><h3 id="符号-等的解析" tabindex="-1">符号 等的解析 <a class="header-anchor" href="#符号-等的解析" aria-hidden="true">#</a></h3><ul><li><p><code>|</code> 选择符 - 和 或 的意思差不多</p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;guolin&#39;</span><span class="token punctuation">;</span>\n<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">u|@</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// true \t</span>\n<span class="token comment">// 如果不加 原子组的话() | 左右两边是各自的一个整体。 eg: 如下</span>\n<span class="token keyword">let</span> tel <span class="token operator">=</span> <span class="token string">&#39;010-8888888&#39;</span><span class="token punctuation">;</span>\n<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">010|020\\-\\d{7,8}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span> <span class="token comment">// true  但是 tel = &#39;010&#39; 也会返回真</span>\n<span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">010</span><span class="token operator">|</span><span class="token number">020</span><span class="token punctuation">)</span>\\<span class="token operator">-</span>\\d<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span>$<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span> <span class="token comment">// true </span>\n</code></pre></div></li><li><p><code>()</code> - 原子表 和<code>[]</code> - 原子组</p><ul><li><p><code>()</code> 原子组表示一个整体</p></li><li><p><code>[]</code> 原子表 里面都是单独的 然后就有或者的意思。- 在原子表里面的括号就是普通的 字符串括号。</p><p><strong>⚠️注： <code>/[(12|34)]/.test();</code> 在这里面 表示 ( 或 1 或 2 或 | 或 3 或 4 或 )</strong></p></li></ul></li><li><p><strong>在字面量 和 对象模式 中的差异</strong></p><ul><li>在 <code>new RegExp()</code> 中 <code>\\d</code>就当作字符串来处理， <code>\\d</code> 就是字符串 <code>d</code>。</li><li><strong>解决办法：</strong> <code>\\\\d</code> 来解决匹配 <code>\\d</code> 的问题。</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> price <span class="token operator">=</span> <span class="token number">21.34</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+\\.\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token comment">// FIXME: 但是使用对象创建就不一样了</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;\\d+\\.\\d+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token comment">// ⚠️：这是因为 在对象里 \\d 当作字符串来处理 \\d 就是 d ; \\. 就是 .</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\d&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true 字符串里面 \\d 就是当作d来处理</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\d+\\.\\d+&#39;</span><span class="token punctuation">)</span> <span class="token comment">// d+.d+</span>\n<span class="token comment">// 解决办法</span>\nreg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\d+\\\\.\\\\d+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\d+\\\\.\\\\d+&#39;</span><span class="token punctuation">)</span> <span class="token comment">// \\d+\\.\\d+</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token comment">// TODO: 没有定义边界的限定 那就是 相当于 g 模式来处理</span>\n</code></pre></div></li><li><p>字符的边界约束</p><ul><li><code>^</code> 表示匹配开头。</li><li><code>$</code> 表示匹配结尾。</li></ul></li><li><p><code>match</code> 方法</p><ul><li>如果找不到就返回 <code>null</code> 。</li></ul><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]${3,5}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\n<span class="token comment">// 这个就表示 整个都是 3到5位的字符串。 如果输入了六个 就返回 null 表示不匹配</span>\n</code></pre></div></li><li><p>数值 与 空白 元字符</p><ul><li><p>匹配 数字</p><div class="language-js"><pre><code><span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token string">&#39;guolin 2012&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d\\d\\d\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2012</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [2, 0, 1, 2] // 加上 g 模式就是收集所有的</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [2012] // 加上 g 模式就是收集所有的  + 匹配至少一个</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\D+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// guolin </span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;郭霖: 010-99999999, 张三：020-8888888&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{3}-\\d{7-8}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 表示 前三个数字 加- 加 7到8位数字  然后g模式 表示全局搜索所有的</span>\n</code></pre></div></li><li><p>匹配 空白元字符</p><ul><li><p><code>\\s</code> 空白 (换行 制表符 空格 分页符等的) 都算是空白。</p></li><li><p><code>\\S</code> 就表示除了 <code>\\s</code> 匹配到的这些。</p><div class="language-js"><pre><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\S</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\\nhd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 是因为会找到 h 找到了一个符合条件的</span>\n</code></pre></div></li></ul></li></ul></li><li><p>原子表 就是里面这些都可以被匹配。 或者 的意思</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-\\d:,]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;:&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;-&quot;, &quot;9&quot;, &quot;9&quot;, &quot;9&quot;, &quot;9&quot;, &quot;9&quot;, &quot;9&quot;, &quot;9&quot;, &quot;9&quot;, &quot;,&quot;, &quot;0&quot;, &quot;2&quot;, &quot;0&quot;, &quot;-&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;, &quot;8&quot;]  就是这些符号 就都给返回 过来了</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-\\d:,]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;:&quot;, &quot;010-99999999,&quot;, &quot;020-8888888&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^-\\d:,]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;郭&quot;, &quot;霖&quot;, &quot; &quot;, &quot; &quot;, &quot;张&quot;, &quot;三&quot;, &quot;：&quot;]  元子表里面加个 ^ 表示 除了这些我都要</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^-\\d:,]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;郭霖&quot;, &quot; &quot;, &quot; 张三：&quot;] 加个加号 就是返回一对的~</span>\n</code></pre></div></li><li><p><code>\\w</code> 和 <code>\\W</code> 元字符</p><ul><li><code>\\w</code> 元字符 用于查找单词字符。 <code>a-z A-Z 0-9</code> 以及<code>_</code>下划线</li><li><code>\\W</code> 除了 <code>\\w</code> 匹配的那些。 比如特殊字符@#$%...</li></ul></li><li><p><code>.</code> 点 元字符的应用</p><ul><li><code>.</code> 就是包括除了 换行符 之外的任何字符。</li><li>⚠️注意： <code>.</code> 如果在 原子组<code>[]</code>里面 只是一个单纯的点。</li></ul></li><li><p><strong>⚠️注意：在 正则表达式里面 手敲出的空格 也是作为匹配来作用的。会匹配 空格...</strong></p></li><li><p>模式 修正符号</p><ul><li><p><code>g</code> 全局匹配 表示匹配所有的，如果不加模式 那就是值匹配一次就终止了。</p></li><li><p><code>i</code> 忽略大小写</p></li><li><p><code>m</code> 多行匹配。</p><div class="language-js"><pre><code><span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n #1 js,200元 #\n #2 css,300元 #\n #8 guolin # 哈哈哈\n #3 node.js,100元 #\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// 结果想要如下 [{ name: &#39;js&#39;, price: &#39;200元&#39; }]; 的格式</span>\n<span class="token comment">// * 表示 0个或者多个  TODO: 尽量小范围做起 然后再匹配 大范围的  先具体化 然后拼凑</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*#\\d+\\s+.+\\s#$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;↵ #1 js,200元 #&quot;, &quot; #2 css,300元 #&quot;, &quot; #3 node.js,100元 #&quot;]</span>\n<span class="token keyword">let</span> testObj <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*#\\d+\\s+.+\\s#$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 先替换前面的  在替换后面的</span>\n  item <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*#\\d+\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s#</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// console.log(&#39;item&#39;, item); // item node.js,100元 </span>\n  <span class="token comment">// console.log(&#39;item.split&#39;, item.split(&#39;,&#39;)); // item.split (2) [&quot;node.js&quot;, &quot;100元 &quot;]</span>\n  <span class="token comment">// TODO:⚠️  长知识了 这样可以进行结 解构 就可以改变生成结构</span>\n  <span class="token punctuation">[</span>name<span class="token punctuation">,</span> price<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> \n  <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> price <span class="token punctuation">}</span> <span class="token comment">// map 返回 return 生成后的结果</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;testObj&#39;</span><span class="token punctuation">,</span> testObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0: {name: &quot;js&quot;, price: &quot;200元 &quot;} 得到 结果 了</span>\n</code></pre></div></li><li><p><code>u</code> 模式 匹配字符属性 - 可以用来 找 汉字啥的 (unicode编码)。</p><div class="language-js"><pre><code><span class="token comment">// a [L] 就表示它是个字母</span>\n<span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;guolin2012.哈哈哈,&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// ⚠️ 字母</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{L}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (6) [&quot;g&quot;, &quot;u&quot;, &quot;o&quot;, &quot;l&quot;, &quot;i&quot;, &quot;n&quot;] // 只匹配字母</span>\n<span class="token comment">// ⚠️ 标点符号</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{P}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (6) [&quot;.&quot;, &quot;,&quot;] // 只匹配 标点符号</span>\n\n<span class="token comment">// ⚠️ 汉字</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{sc=Han}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;哈&quot;, &quot;哈&quot;, &quot;哈&quot;]  // 只匹配汉字 </span>\n\n<span class="token comment">// 使用 u 模式 就可以正确使用 宽字节去匹配了~</span>\n</code></pre></div></li><li><p><code>y</code> 模式 - <code>y</code>模式匹配的是一直 连续的内容。</p><div class="language-js"><pre><code><span class="token comment">// y 模式 使用 exec 的时候 遇见第二个 不是 g 的时候 他就停止了</span>\n<span class="token comment">// 而 g 模式 会跳过 接着找  laseIndex 找不见的时候 会变成 0</span>\n<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;guoglin&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">g</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;u&quot;, index: 1, input: &quot;guoglin&quot;, groups: undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;g&quot;, index: 3, input: &quot;guoglin&quot;, groups: undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>\n\n<span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&#39;guoglin&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">g</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;u&quot;, index: 1, input: &quot;guoglin&quot;, groups: undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>\n<span class="token comment">// FIXME:⚠️  可以改变它的 lastIndex 来让他找到可以匹配的内容</span>\n</code></pre></div></li></ul></li><li><p><code>lastIndex</code>属性。 控制正则开始搜索的位置。</p><div class="language-js"><pre><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;h&quot;, index: 0, input: &quot;houdunren&quot;, groups: undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (9) [&quot;h&quot;, &quot;o&quot;, &quot;u&quot;, &quot;d&quot;, &quot;u&quot;, &quot;n&quot;, &quot;r&quot;, &quot;e&quot;, &quot;n&quot;]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;h&quot;, index: 0, input: &quot;houdunren&quot;, groups: undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;h&quot;, index: 0, input: &quot;houdunren&quot;, groups: undefined]</span>\n\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// ⚠️注 还是需要变量存储的 否则就如同 上面 一直 不会记录位置</span>\n<span class="token comment">// exec 这个方法 是使用全局的时候 才会去记录位置匹配 如果不使用的话 那就如同上面的一直都是第一个</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;h&quot;, index: 0, input: &quot;houdunren&quot;, groups: undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;o&quot;, index: 1, input: &quot;houdunren&quot;, groups: undefined]</span>\n<span class="token comment">// 这样我们就可以 循环去操作</span>\n<span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>原子表里面的区间匹配</p><ul><li>Eg： <code>[0-9]</code> <code>[a-z]</code> 等等的。 ⚠️这里只能升序，不可以降序。 <code>[9-0]</code> 就会报错。</li></ul></li><li><p>排除匹配</p><ul><li><code>[^]</code> 排除</li></ul></li><li><p>匹配全部</p><ul><li><code>[\\s\\S]</code> - <code>[\\w\\W]</code> - <code>[\\d\\D]</code> 等等</li><li><code>.</code> 是匹配 空格的 不匹配换行 换页 符</li></ul></li><li><p><strong>注意事项：⚠️</strong></p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// ⚠️ () 放在外面 是原子组 里面就是括号</span>\n<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">]</span> <span class="token comment">// ⚠️ .+ 放在外面 是匹配 里面就是单纯的 .+</span>\n<span class="token operator">/</span> <span class="token comment">// ⚠️ 是正则的边界符， 所以需要转义一下。 \\/</span>\n<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(h[1-6])&gt;.+&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span> <span class="token comment">// ⚠️ 这里面的 \\1 就是表示 第一个 括号里面的内容</span>\n</code></pre></div></li><li><p><strong><code>\\1 \\2...</code></strong></p><ul><li><p><code>()</code> 这个就当成了一个整体 然后想要复用的话可以从左到右就是 <code>\\1\\2\\3...</code></p></li><li><p><code>/&lt;(h[1-6])&gt;.+&lt;\\/\\1&gt;/i</code> ⚠️ 这里面的 \\1 就是表示 第一个 括号里面的内容</p></li><li><p>依次类推 - <code>\\1</code>就是第一个括号里面的 \\2...</p></li><li><p><strong>⚠️ 数括号 就很简单了 就从左往右 数左括号 第一个左就是 <code>\\1</code> 当然要区分开 条件判断和普通括号</strong></p></li></ul></li><li><p>邮箱中原子组的使用</p><div class="language-js"><pre><code><span class="token function">不写</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">^</span>\\w\\<span class="token punctuation">.</span>com<span class="token operator">|</span>org<span class="token operator">/</span> <span class="token comment">// 前面是一个整体后面 org 是一个整体 不能达到效果</span>\n<span class="token operator">/</span><span class="token operator">^</span>\\w\\<span class="token punctuation">.</span><span class="token punctuation">(</span>com<span class="token operator">|</span>org<span class="token punctuation">)</span><span class="token operator">/</span> <span class="token comment">// 这就表示匹配一个 后面com 和 org 判定的时候是一个 整体 ...</span>\n</code></pre></div></li><li><p><code>(?:)</code> 这样就 不会记录 原子组 ⚠️ 是括号里的</p><div class="language-js"><pre><code><span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\nhttps://www.houdunren.com\nhttps://houdunwang.com\nhttp://houdun.cn\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">https?:\\/\\/((?:\\w+\\.)?\\w+\\.(?:com|org|cn))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  urls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 这里的 就是 //后面第一个原子组里面存的数组</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (3) [&quot;www.houdunren.com&quot;, &quot;houdunwang.com&quot;, &quot;houdun.cn&quot;]</span>\n</code></pre></div></li><li><p><strong>贪婪匹配 能找到的 就尽可能的多个匹配</strong></p></li><li><p><strong>多个正则规则 作用于一条 使用 数组循环 filter 或者 every等等就可以解决</strong></p></li><li><p>禁止贪婪</p><ul><li>就是加 <code>?</code> 因为 <code>?</code> 表示 0个或者1个。</li><li><code>+？ *？ {2,}? {2,100}? </code> 禁止贪婪 倾向于少的一方</li></ul></li></ul><h2 id="正则匹配的小技巧-尽量从小范围做起，然后再往-大范围的去匹配。-先具体化-然后再拼凑" tabindex="-1">正则匹配的小技巧 - 尽量从小范围做起，然后再往 大范围的去匹配。 先具体化 然后再拼凑 <a class="header-anchor" href="#正则匹配的小技巧-尽量从小范围做起，然后再往-大范围的去匹配。-先具体化-然后再拼凑" aria-hidden="true">#</a></h2><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-hidden="true">#</a></h2><ul><li><p><code>match</code></p><p><code>match</code> 方法可在字符串内检索指定的值，或找到一个或者多个正则表达式的匹配。</p><p><code>match</code> 返回一个数组。包括下标-匹配项-被匹配项。</p><p>配合 <code>g</code> 模式 返回匹配项的数组。</p><ul><li>格式 - <code>字符串.match(正则表达式)</code></li></ul></li><li><p><code>exec</code></p><p>和 <code>match</code> 返回的结果差不多。</p><p>不同的是： 格式 - <code>正则表达式.exec(字符串)</code></p><p>不同的是： 可以根据 <code>lastIndex</code> 来影响起始匹配。匹配后会更新 <code>lastIndex</code>属性</p><div class="language-js"><pre><code><span class="token comment">// 使用 exec 来完成全局匹配  这个 完全是因为 exec 受 lastIndex 影响会继续往后遍历 配合 g 模式</span>\n<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果没有 g 模式 就一直重复第一个 永远为true</span>\n  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p><code>matchAll</code></p><p><code>matchAll</code> 方法返回一个迭代器 然后包括里面的搜索细节</p><div class="language-js"><pre><code><span class="token comment">// 手动实现一个 matchAll 代码</span>\n<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">matchAll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 字符串的 match 方法</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;^&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// repeat() 方法字符串复制指定次数。</span>\n    <span class="token keyword">let</span> match <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 递归</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>res<span class="token punctuation">,</span> <span class="token operator">...</span>match<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p><strong><code>replace</code></strong></p><div class="language-js"><pre><code>gl<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>params1<span class="token punctuation">,</span> params2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// params1  可以是 字符 也可以是 正则。 ⚠️</span>\n<span class="token comment">// params2\t可以是 字符 也可以是 函数。\t⚠️</span>\n\n<span class="token comment">// params2 是函数的情况</span>\n<span class="token comment">// 函数参数1 - item 表示匹配到的整个内容</span>\n<span class="token comment">// 🍃 函数参数2...(之后) - 就表示 第一个原子组(左往右 数第一个括号即可) 参数3-第二个 ...往后依次</span>\n\n<span class="token comment">// params2 是字符串的情况</span>\n<span class="token comment">// 🍃$1 就表示第一个原子组(左往右 数第一个括号即可) ...往后依次 $2 $3</span>\n<span class="token comment">// 🍃$`表示匹配内容的左边  $&#39;表示匹配内容的右边  $&amp;表示匹配到的内容</span>\n<span class="token comment">// 🍃?&lt;别名&gt; 这样就是给 原子组起别名 然后替换的时候 $&lt;别名&gt;就可以替换了。 </span>\n<span class="token comment">// \t\t(?&lt;别名&gt; ...) 写在原子组括号的最前面</span>\n<span class="token comment">// 🍃?: 应用在原子组里面 就是排除查找。 然后使用match等方法匹配的时候 就匹配不到了</span>\n<span class="token comment">// \t\t(?: ...) 写在原子组括号的最前面</span>\n\n<span class="token comment">// 注意 ⚠️🍓</span>\n<span class="token comment">// 在 正则表达式里面  使用 \\1 \\2 来表示第一个 第二个原子组。- 简写。 ...往后依次</span>\n</code></pre></div></li><li><p><code>search</code></p><p><code>search</code> 方法 返回下标 检索</p></li><li><p><code>test</code></p><p><code>test</code> 方法 返回匹配后的 <code>true</code> 和 <code>false</code></p><ul><li>格式 - <code>正则表达式.test(字符串)</code></li></ul></li><li><p><code>join</code></p><p><code>join</code>方法 将数组组合成字符串。返回字符串。 参数可以指定 标示符间隔 字符串。</p></li><li><p><code>split</code></p><p><code>split</code>方法 将字符串拆分 然后返回数组 里面参数也可以接收 正则 参数</p></li></ul><h2 id="断言匹配-其实就是-正则的条件判断。" tabindex="-1">断言匹配 - 其实就是 正则的条件判断。 <a class="header-anchor" href="#断言匹配-其实就是-正则的条件判断。" aria-hidden="true">#</a></h2><ul><li><p><code>?=</code> 表示指定匹配项后面是啥。然后才会被匹配到。</p><div class="language-js"><pre><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">后盾人(?=教程)</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// 表示匹配 后盾人并且后面是教程的 才会被匹配到</span>\n<span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">)</span>  <span class="token comment">// 这个只是个条件 这个不是组</span>\n</code></pre></div></li><li><p><code>?&lt;=</code> 表示指定匹配项前面是啥。 然后才能被匹配到</p><div class="language-js"><pre><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=houdunren)\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span> <span class="token comment">// 表示要匹配前面是 后盾人的数字...</span>\n<span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span>href<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;&quot;&quot;])).+(?=\\1)/ // ⚠️注意 (?&lt;=href=([&#39;</span><span class="token string">&quot;]))是断言  ([&#39;&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 是主 只要加了括号\n</code></pre></div></li><li><p><code>?!</code> 表示指定匹配项后面不是什么 - 可以用来做 不能包含什么</p></li><li><p><code>?&lt;!</code> 表示指定匹配项前面不是什么</p></li></ul><h2 id="延伸" tabindex="-1">延伸 <a class="header-anchor" href="#延伸" aria-hidden="true">#</a></h2><ul><li><p>将字符串展开成数组</p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;guolin2020vxecho&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这样可以展开成一个数组</span>\n<span class="token comment">// (16) [&quot;g&quot;, &quot;u&quot;, &quot;o&quot;, &quot;l&quot;, &quot;i&quot;, &quot;n&quot;, &quot;2&quot;, &quot;0&quot;, &quot;2&quot;, &quot;0&quot;, &quot;v&quot;, &quot;x&quot;, &quot;e&quot;, &quot;c&quot;, &quot;h&quot;, &quot;o&quot;]</span>\n</code></pre></div></li><li><p>寻找数字</p><ul><li><p>数组查找</p><div class="language-js"><pre><code>ley nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nums&#39;</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nums (4) [&quot;2&quot;, &quot;0&quot;, &quot;2&quot;, &quot;0&quot;]</span>\n</code></pre></div></li><li><p>正则查找</p><div class="language-js"><pre><code><span class="token keyword">let</span> num <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;num&#39;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token comment">// num (4) [&quot;2&quot;, &quot;0&quot;, &quot;2&quot;, &quot;0&quot;]</span>\n<span class="token comment">// .join(&#39;&#39;) 之后就可以将其 转换成 字符串~</span>\n</code></pre></div></li></ul></li></ul>',24)];var c=n(e,[["render",function(n,t,p,e,c,l){return a(),s("div",null,o)}]]);export{p as __pageData,c as default};
