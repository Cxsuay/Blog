import{_ as n,c as s,o as a,a as p}from"./app.9a3fef87.js";const t='{"title":"Js - 模块化","description":"","frontmatter":{},"headers":[{"level":2,"title":"模块的基本使用","slug":"模块的基本使用"},{"level":3,"title":"模块的延迟解析与严格模式","slug":"模块的延迟解析与严格模式"},{"level":3,"title":"作用域与在模块中的体现","slug":"作用域与在模块中的体现"},{"level":3,"title":"模块的 预解析 （模块之间只解析一次的好处）","slug":"模块的-预解析-（模块之间只解析一次的好处）"},{"level":3,"title":"模块的具名 导入和导出","slug":"模块的具名-导入和导出"},{"level":2,"title":"⚠️ 补充-sub","slug":"⚠️-补充-sub"},{"level":3,"title":"EsModule 不是按照 解构 这种来实现的","slug":"esmodule-不是按照-解构-这种来实现的"},{"level":3,"title":"node && EsModule","slug":"node-esmodule"}],"relativePath":"docs/Js/Modular.md","lastUpdated":1632732114000}',o={},e=[p('<h1 id="js-模块化" tabindex="-1">Js - 模块化 <a class="header-anchor" href="#js-模块化" aria-hidden="true">#</a></h1><div class="language-js"><pre><code><span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 定义一个容器来存储我们的模块</span>\n  <span class="token keyword">const</span> moduleList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// name - 模块名称</span>\n  <span class="token comment">// modules - 依赖的模块</span>\n  <span class="token comment">// action - 想要发生的动作</span>\n  <span class="token keyword">function</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> modules<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 从容器中 拿出依赖 完成</span>\n    modules<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// moduleList 对象存 key-value 所以拿 key</span>\n      <span class="token comment">// 然后放入 modules 数组中</span>\n      <span class="token comment">// </span>\n      modules<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> moduleList<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    moduleList<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> modules<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 容器里面压入一个模块</span>\n    <span class="token comment">// 模块只有在 第一次 初始化的时候 它会执行一次</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;moduleList&#39;</span><span class="token punctuation">,</span> moduleList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> define <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 定义一个 gl 模块 没有依赖模块 function表示 handle-callback</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token function">first</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">max</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// define 帮助我们定义模块</span>\n\nmodule<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;lesson&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">gl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 定义来一个 less 的模块  依赖模块 - gl function表示 handle-callback</span>\n  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">199</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">79</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// define 帮助我们定义模块</span>\n</code></pre></div><ul><li><strong>模块在初始化的时候 返回内容 后续我们在 使用模块的时候 共用的一个内容</strong></li></ul><h2 id="模块的基本使用" tabindex="-1">模块的基本使用 <a class="header-anchor" href="#模块的基本使用" aria-hidden="true">#</a></h2><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>module<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span> <span class="token comment">// 加了 type-module 之后 才可以解析 import 方法</span>\n  <span class="token comment">// 不导出的时候 是私有的    所以我们就需要 按照要求 导出少量的接口</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="模块的延迟解析与严格模式" tabindex="-1">模块的延迟解析与严格模式 <a class="header-anchor" href="#模块的延迟解析与严格模式" aria-hidden="true">#</a></h3><ul><li><p>因为模块之间会有依赖关系 所以系统会有一个<strong>延迟解析</strong>来处理他们</p><p><code>严格模式</code> - 使用模块的时候 <strong>默认就是严格模式 和 class 一样</strong></p></li></ul><h3 id="作用域与在模块中的体现" tabindex="-1">作用域与在模块中的体现 <a class="header-anchor" href="#作用域与在模块中的体现" aria-hidden="true">#</a></h3><ul><li>模块有自己独立的 独立的作用域 使用的话 导出才可以使用 (按需导出的场景)</li></ul><h3 id="模块的-预解析-（模块之间只解析一次的好处）" tabindex="-1">模块的 预解析 （模块之间只解析一次的好处） <a class="header-anchor" href="#模块的-预解析-（模块之间只解析一次的好处）" aria-hidden="true">#</a></h3><ul><li><p><code>import</code> 导入多个相同的 只会执行一次里面的代码 使用的只是导出的变量 方法等等(预解析之后产物)</p><p><strong>然后 共同操作 同一个模块的内容 例如 vuex 等等</strong></p></li></ul><h3 id="模块的具名-导入和导出" tabindex="-1"><strong>模块的具名 导入和导出</strong> <a class="header-anchor" href="#模块的具名-导入和导出" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">let</span> site <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> <span class="token comment">// 具名导出</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 具名导出 如果 export function() {} 会报错</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> site<span class="token punctuation">,</span> show<span class="token punctuation">,</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span> <span class="token comment">// 具名导入</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> api <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span> <span class="token comment">// 批量导入 但是下面使用的时候 也不少写，而且不用的方法 打包工具也会都打包  不太推荐</span>\n<span class="token comment">// 更 推荐 具名导入;</span>\n</code></pre></div><ul><li><p><code>{ site as shahaha }</code> 起别名</p></li><li><p>如果只导出一个的话 那就是 <code>export default class User {}</code> ， <strong>默认导出就一个 所有任意变量来接受 都可以</strong></p></li><li><p><strong>接受的话 就是 import 任意名称 from &#39;xxx.js&#39;</strong></p></li><li><p><code>export { User as default }</code> 这块跟上面的默认导出 效果是一样的 名字就是 <code>default</code></p><div class="language-js"><pre><code><span class="token comment">// 混合导入导出的使用</span>\n<span class="token keyword">export</span> site <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 方法一</span>\n<span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> site <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span>\n<span class="token comment">// 写一行就是</span>\n<span class="token keyword">import</span> User<span class="token punctuation">,</span> <span class="token punctuation">{</span> site <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span>\n\n<span class="token comment">// ------------------------------------------------------------------</span>\n\n<span class="token comment">// 方法二 也不算方法二</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> User <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">,</span> site <span class="token punctuation">}</span> <span class="token comment">// 这样导出</span>\n<span class="token keyword">import</span> User<span class="token punctuation">,</span> <span class="token punctuation">{</span> site <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span> <span class="token comment">// 也是这样引入</span>\n<span class="token comment">// 如果批量导入的话 调用就得 这么调用了</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> api form <span class="token string">&#39;xxx.js&#39;</span>\napi<span class="token punctuation">.</span>default<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napi<span class="token punctuation">.</span>site\n</code></pre></div></li><li><p>默认导出模块的使用规范</p><p>起名字 要 按规范走 名字要和文件名字要有关联</p></li><li><p>模块的合并导出</p><p>在一个文件中 都导入 然后在这个文件中统一导出 类似之前小程序协议</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> web<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span>\n<span class="token keyword">import</span> User<span class="token punctuation">,</span> <span class="token punctuation">{</span> site <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> web<span class="token punctuation">,</span> url<span class="token punctuation">,</span> User<span class="token punctuation">,</span> site <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 如果可能有 名字重复了 比如两个模块都有 url</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> a <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> b <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> tongyi <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span>\ntongyi<span class="token punctuation">.</span>a<span class="token punctuation">.</span>url <span class="token comment">// 这样放置一个具名空间再写</span>\ntongyi<span class="token punctuation">.</span>a<span class="token punctuation">.</span>default<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// 按需加载的函数 动态加载模块</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> b <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span> <span class="token comment">// 这个是需要放置在 顶层的</span>\n<span class="token comment">// if (true) { import * as b from &#39;xxx.js&#39; } // 这样也会报错</span>\n\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;xxx.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️ 这个就是按需加载</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 这样也是可以的</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;xxx.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> site<span class="token punctuation">,</span> url <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 因为是对象 可以使用 展开语法来使用</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️ 这个就是按需加载</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// webpack</span>\n<span class="token string">&#39;dev&#39;</span><span class="token operator">:</span> <span class="token string">&#39;webpack --mode development --watch&#39;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// style.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Style</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// index.js  webpack 的入口文件</span>\n<span class="token keyword">import</span> Style <span class="token keyword">from</span> <span class="token string">&#39;./style.js&#39;</span>\n<span class="token keyword">new</span> <span class="token class-name">Style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// npm run dev 编译之后 就把 es6的文件 编译成 es5了</span>\n</code></pre></div></li></ul><h2 id="⚠️-补充-sub" tabindex="-1">⚠️ 补充-sub <a class="header-anchor" href="#⚠️-补充-sub" aria-hidden="true">#</a></h2><h3 id="esmodule-不是按照-解构-这种来实现的" tabindex="-1"><code>EsModule</code> 不是按照 <code>解构</code> 这种来实现的 <a class="header-anchor" href="#esmodule-不是按照-解构-这种来实现的" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 导出</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./index.js&#39;</span> <span class="token comment">// 引入</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 导出</span>\n<span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">&#39;index.js&#39;</span>  <span class="token comment">// 引入</span>\n\n<span class="token comment">// ❌ 但是这样 导出引入 是不可以的</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n\ta<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./index.js&#39;</span>\n</code></pre></div><ul><li><p>⚠️ 怎么说呢 就是 <code>EsModule</code> 他不是按照 解构 这种方式实现的</p></li><li><p>就是 <code>export</code> 导出 我就 <code>import {}</code> 引入</p></li><li><p><code>export default {}</code> 我就 <code>import a</code> 一个变量接收</p><div class="language-js"><pre><code><span class="token comment">// 下面这种方法 也可以 不过不推荐 因为也麻烦~  👆 也提到过</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 导出 引入</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 导出 引入</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> aAndb <span class="token keyword">from</span> <span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">;</span>\naAndb<span class="token punctuation">.</span>a <span class="token comment">// 调用</span>\n</code></pre></div></li></ul><h3 id="node-esmodule" tabindex="-1"><code>node</code> &amp;&amp; <code>EsModule</code> <a class="header-anchor" href="#node-esmodule" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 导出</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span> <span class="token comment">// 引入</span>\n\n<span class="token comment">// ---------------- 也可以 🍓 ----------------</span>\n<span class="token comment">// 导出~</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token comment">// 引入</span>\n<span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">&#39;./index.js&#39;</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>🍓🍓🍓 不过 <code>node</code> 的<strong>导出引入</strong> 是严格按照 <strong><code>解构</code></strong> 流程走的~</li></ul>',21)];var c=n(o,[["render",function(n,p,t,o,c,l){return a(),s("div",null,e)}]]);export{t as __pageData,c as default};
