import{_ as e,c as o,o as n,a as s}from"./app.9a3fef87.js";const a='{"title":"Node - Api","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node 数据类型","slug":"node-数据类型"},{"level":3,"title":"Buffer","slug":"buffer"},{"level":3,"title":"Stream","slug":"stream"},{"level":3,"title":"event / EventEmitter","slug":"event-eventemitter"},{"level":3,"title":"Error","slug":"error"},{"level":3,"title":"URL","slug":"url"},{"level":3,"title":"global","slug":"global"},{"level":3,"title":"NodeJs提供的几个工具库","slug":"nodejs提供的几个工具库"},{"level":3,"title":"NodeJs 的文件操作能力（Cli 的操作）","slug":"nodejs-的文件操作能力（cli-的操作）"}],"relativePath":"docs/Node/Api.md","lastUpdated":1632732114000}',t={},c=[s('<h1 id="node-api" tabindex="-1">Node - <code>Api</code> <a class="header-anchor" href="#node-api" aria-hidden="true">#</a></h1><h2 id="node-数据类型" tabindex="-1"><code>Node</code> 数据类型 <a class="header-anchor" href="#node-数据类型" aria-hidden="true">#</a></h2><h3 id="buffer" tabindex="-1"><code>Buffer</code> <a class="header-anchor" href="#buffer" aria-hidden="true">#</a></h3><ul><li>流式数据 (非一次性加载完成的数据) 由于产生和使用不一定同速，所以<strong>需要缓存区</strong></li><li><strong>存储需要临时占用大量内存的数据</strong>，内存中开辟的一片区域，用于存放二进制数据</li><li>流的生产者 于 消费者 之间的速度通常是不一致的，因此<strong>需要 <code>buffer</code> 来暂存一些数据</strong></li><li><strong><code>buffer</code> 大小通过 <code>highWaterMark</code> 参数指定</strong>，默认情况下是 <code>16kb</code></li></ul><div class="language-js"><pre><code>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>buffer<span class="token operator">/</span>array<span class="token operator">/</span>string<span class="token punctuation">)</span> <span class="token comment">// 使用堆外内存 新增Buffer 🍓</span>\nBuffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">)</span> <span class="token comment">// 浅拷贝 arrayBuffer，共享内存</span>\nBuffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token comment">// 分配一个指定大小的 Buffer, 默认填0，使用 UTF-8编码 🍓</span>\nBuffer<span class="token punctuation">.</span><span class="token function">allocUnsafe</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token comment">// 分配一个初始化的Buffer 随机，速度很快 ✨✨✨</span>\n</code></pre></div><p><strong>流式数据 会自动创建 <code>Buffer</code>，手动创建 <code>Buffer</code>需谨慎 🍓🍓🍓</strong></p><ul><li><strong>🐷~ 坑：</strong><ul><li><code>alloc</code>绕开回收机制，性能和内存使用提升，<strong>但不安全，可能会造成数据泄露</strong></li><li><strong>大于 4k</strong>，就不在原定义的 内存池中分配，就会 <strong>从 外部 抽取。</strong></li></ul></li></ul><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h4><ul><li><strong>转换格式</strong><ul><li><strong>字符串 - <code>Buffer.from(string)</code> / 解码 <code>buf.toString(string)</code></strong></li><li><strong><code>JSON - buf.JSON()</code></strong></li></ul></li><li><strong>剪裁和拼接</strong><ul><li><strong>剪裁 - <code>Buffer.slice()</code> 与 <code>Array.slice()</code>不同，返回 <code>Buffer</code> 和 <code>原buf</code>共享内存</strong></li><li><strong>拼接 -<code> buf.copy/buf.concat</code> 返回新的 <code>Buffer</code></strong></li></ul></li><li><strong>比较和遍历索引</strong><ul><li><strong>判断相等 - <code>buf.equals(buf2)</code> 比较的是 二进制的值</strong></li><li><strong>索引 - 使用 <code>buf[index]</code> 形式进行索引，<code>for...of/indexOf/includes</code> 等Array 方法 也可以使用</strong></li></ul></li></ul><h3 id="stream" tabindex="-1"><code>Stream</code> <a class="header-anchor" href="#stream" aria-hidden="true">#</a></h3><ul><li><strong><code>Stream</code> 模块提供的是 抽象接口</strong>， 有很多 模块实现了 这个接口</li><li><code>Stream</code> 就是解决 生产者 和 消费者问题的一种方式， <strong>解决异步<code>I/O</code>问题</strong></li></ul><p><strong><code>Stream &amp; Buffer</code> 都是 分割成小块，然后 组合成一个个的小 <code>chunk</code>， 进行传递</strong></p><h3 id="event-eventemitter" tabindex="-1"><code>event</code> / <code>EventEmitter</code> <a class="header-anchor" href="#event-eventemitter" aria-hidden="true">#</a></h3><p><strong><code>EventEmitters</code> -&gt; <code>Event(会有很多事件 之后进入循环) </code> &lt;-&gt; <code>EventLoop</code> -&gt; <code>Event Handlers</code></strong></p><h3 id="error" tabindex="-1"><code>Error</code> <a class="header-anchor" href="#error" aria-hidden="true">#</a></h3><ul><li><p><strong>错误种类</strong></p><ul><li><strong>标准的 js 错误 <code>SyntaxError / ReferenceError</code></strong></li><li><strong>底层操作触发的 系统错误 比如 文件读写</strong></li><li><strong>用户自定义错误</strong></li><li><strong>异常逻辑触发的 <code>AssertionError</code> 通常来自 <code>assert</code> 模块</strong></li></ul></li><li><p><strong>错误冒泡和捕获 (优先处理错误)</strong></p><ul><li><p><strong>所有通过 <code>Node.js</code> 或者 <code>JavaScript</code> 运行时 抛出的异常都是 <code>Error实例</code>, 可以进行 <code>try-catch</code></strong></p></li><li><p><strong>大多数 异步方法 都接受一个 <code>callback函数</code>，该函数 会接受一个 <code>Error对象</code>传入作为 第一个参数。</strong></p></li></ul></li></ul><p><strong><code>NodeJs</code> 内置的错误信息，通常都是 见文知意 的。例如 <code>ERR_ARG_NOT_ITERBLE</code></strong></p><h3 id="url" tabindex="-1"><code>URL</code> <a class="header-anchor" href="#url" aria-hidden="true">#</a></h3><p><strong>弃用 <code>urlObjects</code>, 改用 <code>WHATWG</code>(组织规范) <code>URL</code></strong></p><p><strong>使用 <code>URLSearchParams</code> 操作参数</strong></p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n  <span class="token string">&#39;https://course.study.163.com/path/to/the/page?params1=v1&amp;params2=v2&#39;</span>\n\n  <span class="token comment">// url.parse node提供的工具库</span>\n  url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname 就是 <span class="token string">&#39;path/to/the/page&#39;</span>\n  url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>query 就是 <span class="token string">&#39;params1=v1&amp;params2=v2&#39;</span>\n  <span class="token comment">// Querystring 就是对 query 格式化的一个工具</span>\n  Querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;params2&#39;</span><span class="token punctuation">]</span> 就是 <span class="token string">&#39;v2&#39;</span>\n\n  <span class="token comment">// URLSearchParams 操作参数 来解析 query 对象</span>\n  Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">&#39;foo=bar&amp;bar=qux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token comment">// { foo: &quot;bar&quot;, bar: qux }</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="global" tabindex="-1"><code>global</code> <a class="header-anchor" href="#global" aria-hidden="true">#</a></h3><p><strong>看上去像是 全局变量的存在，实际上 仅存在于 模块的作用域中 🍓🍓🍓</strong></p><p><strong>常见的全局作用域</strong></p><blockquote><p><strong><code>__dirname、__filename、exports、module、require</code></strong></p></blockquote><p><strong>从 <code>Js</code> 继承而来的全局变量</strong></p><blockquote><p><strong><code>console、timer全家桶(setTimeout 啥的)、global容器</code></strong></p></blockquote><p><strong><code>Node</code> 特有的全局变量</strong></p><blockquote><p><strong><code>Buffer、process、URL、WebAssembly</code></strong></p></blockquote><h3 id="nodejs提供的几个工具库" tabindex="-1"><code>NodeJs</code>提供的几个工具库 <a class="header-anchor" href="#nodejs提供的几个工具库" aria-hidden="true">#</a></h3><p><strong><code>url</code> <code>Querystring</code> 上面提到的</strong></p><ul><li><p><code>Nodejs</code>工具库 - <code>util</code></p><ul><li>风格转换 <ul><li><code>promisify &lt;-&gt; callbackify</code></li><li><code>TextEncoder &lt;-&gt; textDecoder</code></li></ul></li><li>调试工具 <ul><li><code>debuglog</code></li><li><code>inspect</code></li><li><code>format</code></li><li><code>getSystemErrorName</code></li></ul></li><li>类型判断 <ul><li><code>types.isDate(value)</code></li></ul></li></ul></li><li><p><code>Nodejs</code>工具库 - <code>assert</code></p><p><strong>内置断言库，需要配合测试框架使用，主动抛出 <code>AssertionError</code> 错误</strong></p><ul><li>断言真假 <ul><li><code>asserts(value, msg), match(string, reg)</code></li></ul></li><li>断言等价 <ul><li><code>strictEqual / deepStrictEqual 以及相反操作</code></li><li><code>equal/deepEqual 弃用</code></li></ul></li><li>断言 成功失败 断言 <code>fail</code> <code> throws</code> 啊啥的 <ul><li><code>fail/throws/doesNotThrow/ifError/rejects</code></li></ul></li></ul></li><li><p><code>Nodejs</code>工具库 - <code>querystring</code></p><p><strong>官方提供的 解析和格式化 URL 查询字符串 的实用工具</strong></p><ul><li>查询字符串 转 键值对 <ul><li><code>querystring.parse(str[,sep[,eq[,options]]])</code></li></ul></li><li>键值对 转 查询字符串 <ul><li><code>querystring.stringify(obj)</code></li></ul></li></ul></li></ul><h3 id="nodejs-的文件操作能力（cli-的操作）" tabindex="-1"><code>NodeJs</code> 的文件操作能力<code>（Cli 的操作）</code> <a class="header-anchor" href="#nodejs-的文件操作能力（cli-的操作）" aria-hidden="true">#</a></h3><h4 id="os" tabindex="-1"><code>os</code> <a class="header-anchor" href="#os" aria-hidden="true">#</a></h4><p><strong><code>os</code>模块 提供了与操作系统相关的实用方法与属性</strong></p><p><strong>通过兼容的方式调用 不同平台的底层命令，形成系统快照</strong></p><p><code>cpus platform type uptime userinfo</code></p><ul><li><strong>定义操作系统级别的枚举常量</strong><ul><li><code>信号常量 SIG*</code></li><li><code>错误常量 E*</code></li><li><code>windows特有 WSA*</code></li><li><code>优先级 PRIORITY*</code></li></ul></li></ul><h4 id="fs" tabindex="-1"><code>fs</code> <a class="header-anchor" href="#fs" aria-hidden="true">#</a></h4><p><strong><code>fs</code> 模块模拟 <code>Linux</code> 环境，提供了用于 与 文件系统进行交互的 <code>API</code></strong></p><ul><li><p><strong>所有文件系统操作都具有 同步和异步 的形式 🍓</strong></p><blockquote><p>读取文件 是一个比较耗时的操作，所以 一般使用 异步模式 读取。</p></blockquote></li><li><p><strong><code>URI</code> 作为特殊的文件 也可以被 <code>fs模块</code> 使用</strong></p></li><li><p><strong>读取操作 文件的时候 我们也可以操作 <code>网络资源URI</code></strong></p></li><li><p><strong>操作文件夹</strong></p><ul><li><strong><code>mkdir/rmdir</code> 等等</strong></li></ul></li><li><p><strong>操作文件</strong></p><ul><li><strong><code>chmod/open/read/write</code></strong></li></ul></li></ul><div class="language-js"><pre><code><span class="token comment">// TODO: </span>\nhttps<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>course<span class="token punctuation">.</span>study<span class="token punctuation">.</span><span class="token number">163.</span>com<span class="token operator">/</span><span class="token number">480000005670249</span><span class="token operator">/</span>lecture<span class="token operator">-</span><span class="token number">480000036957963</span>\n</code></pre></div>',42)];var r=e(t,[["render",function(e,s,a,t,r,l){return n(),o("div",null,c)}]]);export{a as __pageData,r as default};
