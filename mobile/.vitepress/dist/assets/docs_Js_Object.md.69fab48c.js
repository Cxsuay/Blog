import{_ as n,c as s,o as a,a as t}from"./app.9a3fef87.js";const p='{"title":"Js - 对象(Object)","description":"","frontmatter":{},"headers":[{"level":2,"title":"对象的基本了解","slug":"对象的基本了解"},{"level":3,"title":"示例","slug":"示例"},{"level":3,"title":"属性的基本操作","slug":"属性的基本操作"},{"level":2,"title":"对象的引用传值","slug":"对象的引用传值"},{"level":2,"title":"使用 展开语法 完成 参数合并","slug":"使用-展开语法-完成-参数合并"},{"level":2,"title":"解构","slug":"解构"},{"level":3,"title":"解构赋值 新增特性 --- 解构: 结构的分解处理","slug":"解构赋值-新增特性-解构-结构的分解处理"},{"level":3,"title":"解构 - 严格模式","slug":"解构-严格模式"},{"level":3,"title":"解构 - 操作的简写和变量解构","slug":"解构-操作的简写和变量解构"},{"level":3,"title":"多层对象的 解构 操作","slug":"多层对象的-解构-操作"},{"level":3,"title":"解构 默认值 实现配置项合并","slug":"解构-默认值-实现配置项合并"},{"level":3,"title":"函数参数的 解构 特性使用技巧","slug":"函数参数的-解构-特性使用技巧"},{"level":2,"title":"对象属性 的 添加删除 操作","slug":"对象属性-的-添加删除-操作"},{"level":2,"title":"计算属性 和 assign的使用","slug":"计算属性-和-assign的使用"},{"level":2,"title":"对象的深浅拷贝~","slug":"对象的深浅拷贝"},{"level":3,"title":"浅拷贝 的多种操作方法","slug":"浅拷贝-的多种操作方法"},{"level":3,"title":"深拷贝 的多层次分析","slug":"深拷贝-的多层次分析"},{"level":2,"title":"使用 工厂函数 创建对象","slug":"使用-工厂函数-创建对象"},{"level":2,"title":"构造函数 创建对象的方式","slug":"构造函数-创建对象的方式"},{"level":2,"title":"数据 也可以使用 构造函数 构建","slug":"数据-也可以使用-构造函数-构建"},{"level":2,"title":"面向对象的 封装与抽象 - 🍓1","slug":"面向对象的-封装与抽象-🍓1"},{"level":2,"title":"什么是 对象 的属性特征","slug":"什么是-对象-的属性特征"},{"level":3,"title":"灵活的控制 属性的特征","slug":"灵活的控制-属性的特征"},{"level":2,"title":"不允许向对象中添加 属性API","slug":"不允许向对象中添加-属性api"},{"level":2,"title":"禁止向对象当中添加属性","slug":"禁止向对象当中添加属性"},{"level":3,"title":"封闭对象 的API操作","slug":"封闭对象-的api操作"},{"level":3,"title":"冻结对象 的API操作~","slug":"冻结对象-的api操作"},{"level":2,"title":"使用 访问器 保护数据 - 对象就有 get set - 🍓2","slug":"使用-访问器-保护数据-对象就有-get-set-🍓2"},{"level":2,"title":"访问器 伪造属性操作 - 🍓2","slug":"访问器-伪造属性操作-🍓2"},{"level":2,"title":"使用 访问器 批量设置属性  - 🍓2","slug":"使用-访问器-批量设置属性-🍓2"},{"level":2,"title":"访问器 的优先级","slug":"访问器-的优先级"},{"level":2,"title":"TOKEN的读写处理","slug":"token的读写处理"},{"level":2,"title":"构造函数 与 class语法糖 中使用访问器  - 🍓3","slug":"构造函数-与-class语法糖-中使用访问器-🍓3"},{"level":3,"title":"构造函数","slug":"构造函数"},{"level":3,"title":"类","slug":"类"},{"level":2,"title":"Proxy","slug":"proxy"},{"level":3,"title":"什么是 Proxy 代理拦截","slug":"什么是-proxy-代理拦截"},{"level":3,"title":"使用 代理Proxy 控制函数","slug":"使用-代理proxy-控制函数"},{"level":3,"title":"使用 代理Proxy 操作数组~","slug":"使用-代理proxy-操作数组"},{"level":3,"title":"VUEJs 数组绑定的容器更新","slug":"vuejs-数组绑定的容器更新"},{"level":2,"title":"JSON","slug":"json"},{"level":3,"title":"JSON 序列化 与 自定义 toJSON()","slug":"json-序列化-与-自定义-tojson"},{"level":3,"title":"JSON 转为 JS 可操作类型","slug":"json-转为-js-可操作类型"}],"relativePath":"docs/Js/Object.md","lastUpdated":1632732114000}',o={},e=[t('<h1 id="js-对象-object" tabindex="-1">Js - <code>对象(Object)</code> <a class="header-anchor" href="#js-对象-object" aria-hidden="true">#</a></h1><h2 id="对象的基本了解" tabindex="-1"><code>对象</code>的基本了解 <a class="header-anchor" href="#对象的基本了解" aria-hidden="true">#</a></h2><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>\n  grade<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token number">99</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span> score<span class="token operator">:</span> <span class="token number">87</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> l</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t <span class="token operator">+</span> l<span class="token punctuation">.</span>score<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的平均成绩是: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>total <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="属性的基本操作" tabindex="-1"><code>属性</code>的基本操作 <a class="header-anchor" href="#属性的基本操作" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>user<span class="token punctuation">.</span>name <span class="token comment">// 通常推荐 点 语法~</span>\nuser<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token comment">// &#39;my age&#39; 或者 变量 这些属性 使用[]来调用</span>\nuser<span class="token punctuation">.</span>name <span class="token comment">// get</span>\nuser<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;fxl&#39;</span> <span class="token comment">// set</span>\n<span class="token keyword">delete</span> user<span class="token punctuation">.</span>name <span class="token comment">// del</span>\n</code></pre></div><h2 id="对象的引用传值" tabindex="-1"><code>对象</code>的引用传值 <a class="header-anchor" href="#对象的引用传值" aria-hidden="true">#</a></h2><ul><li>基础数据类型 就是 赋值操作 没有引用地址一说</li><li>具体可见 <code>深浅拷贝</code> 章节</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a <span class="token operator">=</span> user<span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;gl&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl - 公用一块地址~</span>\n<span class="token comment">// 传值类型</span>\n<span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 101</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token comment">// 引用类型</span>\n<span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里 传值 复制来引用地址 所以是一块地址</span>\n  a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;gl&quot;, age: 18}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;gl&quot;, age: 18}</span>\n</code></pre></div><h2 id="使用-展开语法-完成-参数合并" tabindex="-1">使用 <code>展开语法</code> 完成 <code>参数合并</code> <a class="header-anchor" href="#使用-展开语法-完成-参数合并" aria-hidden="true">#</a></h2><ul><li><code>🍓get</code> -- 合并默认值的时候可以使用，因为同属性下 后面的会覆盖前面的属性。</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// 基础参数</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;*.png&#39;</span><span class="token punctuation">,</span>\n    size<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 如果有 params 的 就先使用 params 的参数 然后在使用默认配置</span>\n  <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>baseConfig<span class="token punctuation">,</span> <span class="token operator">...</span>params <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> config\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">{</span> size<span class="token operator">:</span> <span class="token number">99</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="解构" tabindex="-1"><code>解构</code> <a class="header-anchor" href="#解构" aria-hidden="true">#</a></h2><h3 id="解构赋值-新增特性-解构-结构的分解处理" tabindex="-1"><code>解构赋值</code> 新增特性 --- 解构: 结构的分解处理 <a class="header-anchor" href="#解构赋值-新增特性-解构-结构的分解处理" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl</span>\n\n<span class="token keyword">function</span> <span class="token function">gl</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> random <span class="token punctuation">}</span> <span class="token operator">=</span> Math<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="解构-严格模式" tabindex="-1"><code>解构</code> - 严格模式 <a class="header-anchor" href="#解构-严格模式" aria-hidden="true">#</a></h3><ul><li>严格模式下 变量的定义需要 声明才可以。</li></ul><div class="language-js"><pre><code><span class="token comment">// 正常来讲</span>\n<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl 这样也是可以的</span>\n\n<span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// name 就打印不出来 没有声明</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user\n<span class="token comment">// ⚠️ 平常最好是使用 严格模式 来声明</span>\n</code></pre></div><h3 id="解构-操作的简写和变量解构" tabindex="-1"><code>解构</code> - 操作的简写和变量解构 <a class="header-anchor" href="#解构-操作的简写和变量解构" aria-hidden="true">#</a></h3><ul><li>属性和值是一样的话 就可以简写~</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span> <span class="token comment">// name: name</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span> <span class="token comment">// age: age</span>\n\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>\n</code></pre></div><h3 id="多层对象的-解构-操作" tabindex="-1">多层对象的 <code>解构</code> 操作 <a class="header-anchor" href="#多层对象的-解构-操作" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>\n  obj<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">,</span>\n  obj<span class="token operator">:</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span> <span class="token comment">// 就相当于 let { title } = { title: &#39;js&#39; }</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> hd<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl js</span>\n</code></pre></div><h3 id="解构-默认值-实现配置项合并" tabindex="-1"><code>解构</code> 默认值 实现配置项合并 <a class="header-anchor" href="#解构-默认值-实现配置项合并" aria-hidden="true">#</a></h3><ul><li>默认值设置之后 <strong>没有传递或者没有属性就使用默认值，传递了值就使用传递的</strong></li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">&#39;666&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl 123 666</span>\n<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span> age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">&#39;title&#39;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span> <span class="token comment">// 如果没有title值 那就是默认 如果有 那就是真正的值了</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl 18 title</span>\n<span class="token comment">// 参数合并</span>\n<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> width<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> bgc<span class="token operator">=</span><span class="token string">&quot;red&quot;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> opts<span class="token punctuation">;</span>\n  <span class="token comment">// 如果传递参数就是传递进来的 如果没有就使用默认值~</span>\n<span class="token punctuation">}</span>\n<span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="函数参数的-解构-特性使用技巧" tabindex="-1">函数参数的 <code>解构</code> 特性使用技巧 <a class="header-anchor" href="#函数参数的-解构-特性使用技巧" aria-hidden="true">#</a></h3><ul><li><code>obj(&#39;gl&#39;, {sex: &#39;男&#39;, age: 18})</code> 传递对象就需要指定属性 不然就是 默认值或者 undefined</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">arr</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">arr</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> <span class="token punctuation">{</span>sex<span class="token punctuation">,</span> age<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl 18 男</span>\n<span class="token punctuation">}</span>\n<span class="token function">obj</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>sex<span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 传递对象就需要指定属性 不然就是 默认值或者 undefined</span>\n</code></pre></div><h2 id="对象属性-的-添加删除-操作" tabindex="-1"><code>对象属性</code> 的 <code>添加删除</code> 操作 <a class="header-anchor" href="#对象属性-的-添加删除-操作" aria-hidden="true">#</a></h2><ul><li><p><code>对象与原型链</code> 属性检测实例</p><p><code>hasOwnProperty</code> 只看自己 不看父级</p><p><code>in </code> 看自己也看父级</p></li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 添加</span>\nuser<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>\n<span class="token comment">// 删除</span>\n<span class="token keyword">delete</span> user<span class="token punctuation">.</span>a<span class="token punctuation">;</span>\n<span class="token comment">// 对象的属性检测</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h2 id="计算属性-和-assign的使用" tabindex="-1"><code>计算属性</code> 和 <code>assign</code>的使用 <a class="header-anchor" href="#计算属性-和-assign的使用" aria-hidden="true">#</a></h2><ul><li><p>参与计算</p><div class="language-js"><pre><code><span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">;</span>\ngl<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;郭霖&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 郭霖</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    b<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>\n    b<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 归并</span>\n  obj<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cur<span class="token punctuation">.</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { gl-0: {a: 1, b: &quot;gl&quot;}, gl-1: {a: 11, b: &quot;gl&quot;} }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2-tab键位</span>\n</code></pre></div></li><li><p><code>Object.assign</code> - 对象合并</p><p><strong>属性相同 后面的会覆盖前面的</strong></p><div class="language-js"><pre><code><span class="token comment">// 遍历操作</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;name&quot;, &quot;age&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;gl&quot;, 18]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&quot;name&quot;, &quot;gl&quot;], [&quot;age&quot;, 18]]</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> gl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name age</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;gl&#39; 18</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// for...of 操作迭代对象的</span>\n     <span class="token keyword">const</span> key <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">-</span> key<span class="token operator">:</span> <span class="token number">1</span> key<span class="token operator">:</span> <span class="token number">2</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name age</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;gl&#39; 18</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h2 id="对象的深浅拷贝" tabindex="-1">对象的<code>深浅拷贝</code>~ <a class="header-anchor" href="#对象的深浅拷贝" aria-hidden="true">#</a></h2><h3 id="浅拷贝-的多种操作方法" tabindex="-1"><code>浅拷贝</code> 的多种操作方法 <a class="header-anchor" href="#浅拷贝-的多种操作方法" aria-hidden="true">#</a></h3><p><strong>浅拷贝的意思就是 我们不能深层次的进行赋值，如果 里面还有个对象结构 他就只能拿到引用地址了</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 这样就是每个都共用了一块内存空间 这个就是 浅拷贝</span>\n</code></pre></div><ul><li><p>赋值</p><div class="language-js"><pre><code><span class="token keyword">let</span> b1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;haha&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> b1<span class="token punctuation">.</span>name\n<span class="token punctuation">}</span> <span class="token comment">// 这样就是每个都开辟了一个自己的内存空间</span>\nb1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;555&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// haha</span>\n</code></pre></div></li><li><p>进阶 - 对 <code>第一层级</code> 的循环赋值</p><div class="language-js"><pre><code><span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> gl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> gl<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;gl&quot;, age: 18}</span>\ngl<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;666&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;gl&quot;, age: 18}</span>\n</code></pre></div></li><li><p><code>Object.assign</code></p><div class="language-js"><pre><code><span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> gl<span class="token punctuation">)</span><span class="token punctuation">;</span>\ngl<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;999&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;gl&quot;, age: 18}</span>\n</code></pre></div></li><li><p><code>展开运算符</code></p><div class="language-js"><pre><code><span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>gl <span class="token punctuation">}</span><span class="token punctuation">;</span>\ngl<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;999&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;gl&quot;, age: 18}</span>\n</code></pre></div></li></ul><h3 id="深拷贝-的多层次分析" tabindex="-1"><code>深拷贝</code> 的多层次分析 <a class="header-anchor" href="#深拷贝-的多层次分析" aria-hidden="true">#</a></h3><ul><li>深层次的赋值 就是 深拷贝 - 递归</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>\n  user<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;fxl&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token function">copy</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li><p><strong><code>深拷贝 代码</code></strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> objClone <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> objClone<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h2 id="使用-工厂函数-创建对象" tabindex="-1">使用 <code>工厂函数</code> 创建对象 <a class="header-anchor" href="#使用-工厂函数-创建对象" aria-hidden="true">#</a></h2><ul><li><p>在工厂函数当中呢 对于同一动作进行定制~</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">,</span>\n    <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;-guolin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token string">&#39;GGG&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngl<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GGG-guolin</span>\n</code></pre></div></li></ul><h2 id="构造函数-创建对象的方式" tabindex="-1"><code>构造函数</code> 创建对象的方式 <a class="header-anchor" href="#构造函数-创建对象的方式" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 🍓🍓🍓 一般情况下 return this 是默认自带的~</span>\n  <span class="token comment">// 🍓🍓🍓 return this;</span>\n  <span class="token comment">// 🍓🍓🍓 构造函数的时候不需要返回 任何值~</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> func <span class="token operator">=</span> gl<span class="token punctuation">.</span>show<span class="token punctuation">;</span> <span class="token comment">// 在这里 gl.show - this是User, func调用是外面的this - window</span>\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="数据-也可以使用-构造函数-构建" tabindex="-1">数据 也可以使用 <code>构造函数</code> 构建 <a class="header-anchor" href="#数据-也可以使用-构造函数-构建" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new Object();</span>\n<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n<span class="token keyword">let</span> User <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  this.name = name;\n  this.show = function() {\n    console.log(&#39;66665&#39;)\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngl<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 66665</span>\n</code></pre></div><h2 id="面向对象的-封装与抽象-🍓1" tabindex="-1">面向对象的 <code>封装与抽象</code> - 🍓1 <a class="header-anchor" href="#面向对象的-封装与抽象-🍓1" aria-hidden="true">#</a></h2><p><strong>封装方法 让外界不能改变 我在构造函数里面 定义的属性和方法~</strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// this.name = name;</span>\n  <span class="token comment">// this.age = age;</span>\n  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 定义在 对象里面 防止外部通过 new 实例来该改变属性值</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 对方法进行 抽象的私有处理~</span>\n  <span class="token comment">// this.info = function() {</span>\n  <span class="token comment">//   return data.age &gt; 20 ? &#39;老年&#39; : &#39;青年&#39;;</span>\n  <span class="token comment">// }</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">info</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 调用的时候 直接 info 就可以</span>\n    <span class="token keyword">return</span> data<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">?</span> <span class="token string">&#39;老年&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;青年&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> xj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;哈哈哈&#39;</span> <span class="token comment">// 并不会改变 处理结果~</span>\nxj<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl青年</span>\n</code></pre></div><h2 id="什么是-对象-的属性特征" tabindex="-1">什么是 <code>对象</code> 的属性特征 <a class="header-anchor" href="#什么是-对象-的属性特征" aria-hidden="true">#</a></h2><ul><li><p><code>Object.getOwnPropertyDescriptor</code> - <strong>查找特定属性的 特征</strong></p></li><li><p><code>Object.getOwnPropertyDescriptors</code> - <strong>这个返回的就是 对象所有属性的特征</strong></p></li><li><p><code>defineProperty</code> - <strong>对特定属性 进行设置</strong></p><ul><li><code>configurable</code> - <strong>是否可以被删除 或者 重新被配置.</strong></li><li><code>enumerable</code> - <strong>是否可以遍历 枚举...</strong></li><li><code>value</code> - <strong>值</strong></li><li><code>writable</code> - <strong>是否可以修改</strong></li></ul></li><li><p><code>defineProperties</code> - <strong>一次对多个属性进行设置</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找特定属性的 特征</span>\n<span class="token comment">// configurable: true 是否可以被删除 或者 重新被配置.</span>\n<span class="token comment">// enumerable: true 是否可以遍历 枚举...</span>\n<span class="token comment">// value: &quot;gl&quot;  值</span>\n<span class="token comment">// writable: true 是否可以修改</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个返回的就是 对象所有属性的特征</span>\n</code></pre></div></li></ul><h3 id="灵活的控制-属性的特征" tabindex="-1">灵活的控制 <code>属性的特征</code> <a class="header-anchor" href="#灵活的控制-属性的特征" aria-hidden="true">#</a></h3><p><strong>没有就是设置 有就是更改</strong></p><div class="language-js"><pre><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token string">&#39;郭霖&#39;</span><span class="token punctuation">,</span>\n  writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 属性不可以修改~ 严格模式下就会有提示</span>\n  enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Object.keys for...in 啥的遍历</span>\n  configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不可以被删除 或者不可以被 重新配置(defineProperty)~ 严格模式下就会有提示</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 郭霖</span>\n<span class="token keyword">delete</span> user<span class="token punctuation">.</span>name\nObject<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">// 一次对多个属性进行设置  就用这个~</span>\n  name<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="不允许向对象中添加-属性api" tabindex="-1">不允许向对象中添加 <code>属性API</code> <a class="header-anchor" href="#不允许向对象中添加-属性api" aria-hidden="true">#</a></h2><h2 id="禁止向对象当中添加属性" tabindex="-1">禁止向对象当中添加属性 <a class="header-anchor" href="#禁止向对象当中添加属性" aria-hidden="true">#</a></h2><p><strong><code>Object.preventExtensions</code> - <code>Object.isExtensible()</code></strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token comment">// 禁止向对象中添加属性了</span>\n<span class="token comment">// 判断方法</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果为 true 那就可以添加属性了</span>\n  user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;gl&quot;}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="封闭对象-的api操作" tabindex="-1"><code>封闭对象</code> 的API操作 <a class="header-anchor" href="#封闭对象-的api操作" aria-hidden="true">#</a></h3><p><strong><code>Object.seal</code> - <code>Object.isSealed</code></strong></p><ul><li><p>封闭了之后是不可以添加属性了</p><p>不可以删除对象</p><p>也不可以配置 枚举 配置(configurable) 这些了</p></li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 封闭对象 就是将 configurable 设置成了 false;</span>\nuser<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;zq&#39;</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;zq&quot;}</span>\n<span class="token comment">// 判断</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 处于封闭状态</span>\n<span class="token punctuation">}</span> <span class="token comment">// 所以默认取反 然后做操作~</span>\n</code></pre></div><h3 id="冻结对象-的api操作" tabindex="-1"><code>冻结对象</code> 的API操作~ <a class="header-anchor" href="#冻结对象-的api操作" aria-hidden="true">#</a></h3><p><strong><code>Object.freeze</code> - <code>Object.isFrozen</code></strong></p><ul><li><p><strong>不可修改 不能添加 不能删除 不能配置 枚举呀 config 这些属性了</strong></p><p><strong>可以遍历~ 可以读取~</strong></p></li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 冻结对象 就是将 configurable writable 设置成 false;</span>\nuser<span class="token punctuation">.</span>addPro <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;hahaha&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;gl&quot;}</span>\n<span class="token comment">// 不可修改 不能添加 不能删除 不能配置 枚举呀 config 这些属性了   --- 可以遍历~ 可以读取~</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 冻结判断 冻结了 就是true</span>\n</code></pre></div><h2 id="使用-访问器-保护数据-对象就有-get-set-🍓2" tabindex="-1">使用 <code>访问器</code> 保护数据 - 对象就有 get set - 🍓2 <a class="header-anchor" href="#使用-访问器-保护数据-对象就有-get-set-🍓2" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">||</span> value <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">||</span> value <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;年龄格式错误&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>age <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>age<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span> <span class="token comment">// throw new Error(&#39;年龄格式错误&#39;);</span>\n\nuser<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 99</span>\n</code></pre></div><h2 id="访问器-伪造属性操作-🍓2" tabindex="-1"><code>访问器</code> 伪造属性操作 - 🍓2 <a class="header-anchor" href="#访问器-伪造属性操作-🍓2" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">let</span> Lesson <span class="token operator">=</span> <span class="token punctuation">{</span>\n  lists<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">212</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 这个就是 相当于计算属性</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lists<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> c<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> t <span class="token operator">+</span> c<span class="token punctuation">.</span>price\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lesson<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 312</span>\n<span class="token comment">// 因为 只有 get, 没有 set 所以伪造属性操作 这样最合适~</span>\n</code></pre></div><h2 id="使用-访问器-批量设置属性-🍓2" tabindex="-1">使用 <code>访问器</code> 批量设置属性 - 🍓2 <a class="header-anchor" href="#使用-访问器-批量设置属性-🍓2" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">const</span> web <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;vxecho.cn&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">set</span> <span class="token function">site</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">site</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的网址是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nweb<span class="token punctuation">.</span>site <span class="token operator">=</span> <span class="token string">&quot;开源产品,www.Vxechi.cn&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>web<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// www.Vxechi.cn</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>web<span class="token punctuation">.</span>site<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开源产品的网址是www.Vxechi.cn</span>\n</code></pre></div><h2 id="访问器-的优先级" tabindex="-1"><code>访问器</code> 的优先级 <a class="header-anchor" href="#访问器-的优先级" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol 是唯一的 Symbol != Symbol</span>\n<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// name: &#39;hhh&#39;,</span>\n  <span class="token punctuation">[</span><span class="token constant">DATA</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">DATA</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;访问器的优先级 比 user.name 要高&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">DATA</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl</span>\n</code></pre></div><h2 id="token的读写处理" tabindex="-1"><code>TOKEN</code>的读写处理 <a class="header-anchor" href="#token的读写处理" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">let</span> Request <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">set</span> <span class="token function">token</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;跳转到 登录页面&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> token<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nRequest<span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token string">&#39;alssidmqwenhqw&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// alssidmqwenhqw</span>\n</code></pre></div><h2 id="构造函数-与-class语法糖-中使用访问器-🍓3" tabindex="-1">构造函数 与 class语法糖 中使用访问器 - 🍓3 <a class="header-anchor" href="#构造函数-与-class语法糖-中使用访问器-🍓3" aria-hidden="true">#</a></h2><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-hidden="true">#</a></h3><ul><li><strong>如果没有定义访问器 - 在外部可以随意修改这里的属性</strong></li><li><strong>定义了访问器 - 设置完访问器之后 就看不到属性了 但是读取 是可以读到的~</strong></li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// this.name = name;</span>\n  <span class="token comment">// this.age = age;</span>\n  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;名称设置的不符合。&#39;</span><span class="token punctuation">)</span>\n        data<span class="token punctuation">.</span>name <span class="token operator">=</span> value<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 如果没有定义访问器 </span>\ngl<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;郭霖&#39;</span> <span class="token comment">// 在外部可以随意修改这里的属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User {name: &quot;郭霖&quot;, age: 18}</span>\n<span class="token comment">// 定义了访问器</span>\ngl<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;郭霖&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 郭霖</span>\ngl<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// Uncaught Error: 名称设置的不符合。</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置完访问器之后 就看不到属性了 User {}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl 但是读取 是可以读到的~</span>\n</code></pre></div><h3 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">DATA</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token comment">// 除了这样设置 类里面有私有属性 什么的也可以设置</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">DATA</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;名称设置的不符合。&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">DATA</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User {Symbol(): {…}}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl</span>\n</code></pre></div><h2 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-hidden="true">#</a></h2><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener noreferrer">proxy官网介绍</a></strong></p><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noopener noreferrer">Reflect官网介绍</a></strong></p><h3 id="什么是-proxy-代理拦截" tabindex="-1">什么是 <code>Proxy</code> 代理拦截 <a class="header-anchor" href="#什么是-proxy-代理拦截" aria-hidden="true">#</a></h3><p><strong><code>defineProperty</code> 是对原有对象的一个劫持 本身的意义是定义属性标签 它会污染原对象</strong></p><p><strong><code>proxy</code> 也会省去一个<code> for in</code> 循环 (很省空间)</strong></p><ul><li><p><code>get</code> - <code>return obj[property]</code> 这样不太优雅</p><p><strong>可以转换成</strong> <code>return Reflect.get(target, key);</code></p></li><li><p><code>set</code> - <code>return target[key] = value</code></p><p><strong>可以转换成</strong> <code>return Reflect.set(target, key, value)</code></p><p><strong>这个是和 proxy 相辅相成的 可以直接进行设置</strong></p></li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> gl <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// return obj[property];</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以换成这个</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    obj<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 这个是在严格模式下 需要设置的~</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl</span>\nproxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;555&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 555</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Proxy {name: &quot;555&quot;}</span>\n</code></pre></div><h3 id="使用-代理proxy-控制函数" tabindex="-1">使用 <code>代理Proxy</code> 控制函数 <a class="header-anchor" href="#使用-代理proxy-控制函数" aria-hidden="true">#</a></h3><p><strong>使用代理来作为 中间桥梁 来对其中对一些事件 做一些处理~</strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> num <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// params1 - 原函数</span>\n  <span class="token comment">// params2 - 代理对象 this 当前上下文...</span>\n  <span class="token comment">// params3 - 行参</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">fun<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// agrs 因为是 apply 那就是 数组 [5]</span>\n    <span class="token comment">// console.log(&#39;obj&#39;, obj); // obj {}</span>\n    <span class="token comment">// 查看 阶乘 执行的时间</span>\n    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;run&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// time 和 timeEnd 标示需要一样的</span>\n    <span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// run: 0.023193359375ms</span>\n    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;run&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">proxy</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="使用-代理proxy-操作数组" tabindex="-1">使用 <code>代理Proxy</code> 操作数组~ <a class="header-anchor" href="#使用-代理proxy-操作数组" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// console.log(array); // [1, 2, 3] - 原数组~</span>\n    <span class="token comment">// console.log(key); // 0 - 下标</span>\n    <span class="token keyword">let</span> content <span class="token operator">=</span> array<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    content <span class="token operator">=</span> content <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">&#39;true&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;false&#39;</span>\n    <span class="token keyword">return</span> content<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="vuejs-数组绑定的容器更新" tabindex="-1"><code>VUEJs</code> 数组绑定的容器更新 <a class="header-anchor" href="#vuejs-数组绑定的容器更新" aria-hidden="true">#</a></h3><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>这里也会发生更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 只找到 title 的数据让其发生更新</span>\n      document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[v-model=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        item<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[v-bind=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        item<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// get(obj, property) {</span>\n    <span class="token comment">//   return </span>\n    <span class="token comment">// }</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// 绑定事件</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> els <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;[v-model]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    els<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        proxy<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;v-model&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="json" tabindex="-1"><code>JSON</code> <a class="header-anchor" href="#json" aria-hidden="true">#</a></h2><p><strong><code>JSON</code> 是一种通用格式 前后端交互 或者发公众号啥的</strong></p><p><strong><code>JSON.stringify()</code> -<code> JSON.parse()</code></strong></p><h3 id="json-序列化-与-自定义-tojson" tabindex="-1"><code>JSON</code> 序列化 与 自定义 <code>toJSON()</code> <a class="header-anchor" href="#json-序列化-与-自定义-tojson" aria-hidden="true">#</a></h3><ul><li><p><code>JSON.stringify()</code></p><ul><li>params1 - 就是要转 json 的对象</li><li>params2 - 就是要保留的属性 e.g: [&#39;title&#39;]</li><li>params3 - tab符占位</li></ul></li><li><p><code>toJSON</code></p><p><strong><code>JSON.stringify</code> 的时候会查看有没有 <code>toJSON</code> 方法</strong></p><p><strong>有的话 就按照你定制的返回数据</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">toJSON</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// JSON.stringify 的时候会查看有没有 toJSON 方法</span>\n    <span class="token comment">// 有的话 就按照你定制的返回数据</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      title<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;title&quot;:&quot;1&quot;}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// {</span>\n<span class="token comment">//   &quot;title&quot;: &quot;1&quot;</span>\n<span class="token comment">// }</span>\n</code></pre></div><h3 id="json-转为-js-可操作类型" tabindex="-1"><code>JSON</code> 转为 <code>JS</code> 可操作类型 <a class="header-anchor" href="#json-转为-js-可操作类型" aria-hidden="true">#</a></h3><p><strong><code>JSON.parse()</code></strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> jsonObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// console.log(JSON.parse(jsonObj)); // {a: 1}</span>\n<span class="token comment">// params1 - 要转换的 json 串</span>\n<span class="token comment">// params2 - 函数</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    value<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// {a: 2}</span>\n</code></pre></div></li></ul>',106)];var c=n(o,[["render",function(n,t,p,o,c,u){return a(),s("div",null,e)}]]);export{p as __pageData,c as default};
