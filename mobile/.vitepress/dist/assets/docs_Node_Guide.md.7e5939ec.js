import{_ as n,c as s,o as a,a as o}from"./app.9a3fef87.js";const e='{"title":"Node - 引导","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node 学习资源推荐","slug":"node-学习资源推荐"},{"level":2,"title":"Node 安装 及 版本管理","slug":"node-安装-及-版本管理"},{"level":2,"title":"Node 模块机制 及 Npm(包管理工具)","slug":"node-模块机制-及-npm-包管理工具"},{"level":3,"title":"模块机制","slug":"模块机制"},{"level":3,"title":"模块加载机制 (require/export)","slug":"模块加载机制-require-export"},{"level":3,"title":"扩展👉 `(缓存函数)`","slug":"扩展👉-缓存函数"},{"level":3,"title":"Npm","slug":"npm"},{"level":2,"title":"Node 特点/能力","slug":"node-特点-能力"},{"level":3,"title":"能力","slug":"能力"},{"level":3,"title":"特点","slug":"特点"},{"level":2,"title":"Node 架构 ✨~补充","slug":"node-架构-✨-补充"}],"relativePath":"docs/Node/Guide.md","lastUpdated":1632732114000}',t={},p=[o('<h1 id="node-引导" tabindex="-1">Node - <code>引导</code> <a class="header-anchor" href="#node-引导" aria-hidden="true">#</a></h1><h2 id="node-学习资源推荐" tabindex="-1"><code>Node</code> 学习资源推荐 <a class="header-anchor" href="#node-学习资源推荐" aria-hidden="true">#</a></h2><ul><li><p><strong><a href="https://github.com/i5ting/How-to-learn-node-correctly" target="_blank" rel="noopener noreferrer">Node学习的正确姿势</a></strong></p></li><li><p><strong><a href="https://github.com/jimuyouyou/node-interview-questions" target="_blank" rel="noopener noreferrer">Node面试集锦</a></strong></p><ul><li>模块机制</li><li>事件异步机制</li><li>存储</li></ul></li><li><p><strong><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md" target="_blank" rel="noopener noreferrer">Node最佳实践</a></strong></p></li></ul><h2 id="node-安装-及-版本管理" tabindex="-1"><code>Node</code> 安装 及 版本管理 <a class="header-anchor" href="#node-安装-及-版本管理" aria-hidden="true">#</a></h2><ul><li><p><code>Mac</code></p><ul><li><p><code>MacOS-Install(.pkg)</code> 官方提供的 安装包； 傻瓜式安装。</p></li><li><p><code>Homebrew</code> 命令行安装到全局，手动管理。</p></li><li><p><code>NVM</code> 推荐使用，管理版本，方便切换。</p><ul><li><p><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh</code></p></li><li><p>下载<code>nvm</code></p><blockquote><p><code>nvm --help</code> 检测 <code>nvm</code> 安装成功了没</p><p><code>nvm install --lts</code> 安装最新最稳定的 版本<code>node</code></p><p><code>node -v</code> 检测 <code>Node</code> 安装以及安装版本</p></blockquote></li></ul></li></ul></li><li><p><code>Node</code> 版本选择</p><ul><li><strong><code>LTS / Current</code> ?</strong><ul><li>生产环境下 使用长期支持版本</li><li>实验项目 可以使用 <code>Current</code> 尝试新特性</li><li><strong>奇数为 不稳定版本，偶数 为相对稳定版本 🍓🍓🍓</strong></li></ul></li><li><strong>始终保持最新？ No</strong><ul><li>生产环境，稳定大于一切</li><li>停止维护，并非项目不可用</li><li>使用版本管理工具，在本地开发时 可以维护多个版本，生产环境只需要一个版本。</li></ul></li></ul></li></ul><h2 id="node-模块机制-及-npm-包管理工具" tabindex="-1"><code>Node</code> 模块机制 及 <code>Npm</code>(包管理工具) <a class="header-anchor" href="#node-模块机制-及-npm-包管理工具" aria-hidden="true">#</a></h2><h3 id="模块机制" tabindex="-1">模块机制 <a class="header-anchor" href="#模块机制" aria-hidden="true">#</a></h3><ul><li><code>Node</code>应用由模块组成，采用 <code>CJS/ESM</code> 模块规范来组织</li><li><strong>每个文件就是一个模块，有自己的作用域</strong></li><li><strong>在一个文件里面定义的变量，函数，类。都是私有的，对其他文件是不可见的</strong></li><li><strong>在 <code>Node</code> 中，模块的加载是运行时 同步加载 的 🍓🍓🍓 (加载进来 然后执行代码)</strong></li><li><strong>模块可以多次加载， 但是只会在第一次加载时运行一次，然后运行结果就被缓存了。 🍓🍓🍓</strong></li></ul><h3 id="模块加载机制-require-export" tabindex="-1">模块加载机制 <code>(require/export)</code> <a class="header-anchor" href="#模块加载机制-require-export" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">const</span> xx <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="路径类型" tabindex="-1"><strong>路径类型</strong> <a class="header-anchor" href="#路径类型" aria-hidden="true">#</a></h4><ul><li><p><strong>相对路径 or 绝对路径</strong></p><ol><li>将路径转为绝对路径</li><li>查找当前路径下是否存在 <code>xx/xx.js/xx.json/xx.node</code> 等文件</li><li>如果没有 就将 <code>xx</code> 当作目录，找到下面的 <code>index/index.js/json...</code></li></ol></li><li><p><strong>内置模块</strong></p><ul><li>返回该模块，比如 <code>path/fs</code></li></ul></li><li><p><strong>没有路径</strong></p><ul><li>根据所在的父级模块确定安装目录，在目录中查找 入口文件</li></ul></li><li><p><strong>缓存</strong></p><p><strong>实际中的 模块处理，还有 缓存 的一个概念在。</strong></p><ul><li>缓存中存在了，直接返回。</li><li>内置模块，则直接加载。</li><li>根据找到的文件创建 新的模块并缓存。</li></ul></li></ul><h3 id="扩展👉-缓存函数" tabindex="-1"><strong>扩展👉 <code>(缓存函数)</code></strong> <a class="header-anchor" href="#扩展👉-缓存函数" aria-hidden="true">#</a></h3><p><strong><code>Js</code> - 缓存函数 <code>( memoize )</code></strong></p><ul><li><p>实现原理 - <strong>把参数和对应的结果数据，存在一个对象中。</strong></p><p><strong>调用的时候，判断参数对应的数据是否存在，存在就返回 对应的结果数据</strong></p><div class="language-js"><pre><code><span class="token comment">// fn 的简易版本</span>\n<span class="token keyword">const</span> <span class="token function-variable function">memoize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> hash</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不存在，计算并缓存值</span>\n      cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存在 直接返回值</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// fn &amp;&amp; hash 组合版本 (hash 是个函数，用来计算 key 值)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">memoize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> hash</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">memoizeFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n   \t<span class="token keyword">const</span> cache <span class="token operator">=</span> memoizeFn<span class="token punctuation">.</span>cache<span class="token punctuation">;</span>\n    <span class="token comment">// 如果传入 hash 就用 hash函数 来计算key， 并当作 key</span>\n    <span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hash <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token operator">:</span> key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>address<span class="token punctuation">]</span><span class="token punctuation">)</span> cache<span class="token punctuation">[</span>address<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>address<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n \tmemoizeFn<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> memoizeFn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">memoize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// return memoizeFn</span>\n<span class="token function">memoize</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// memoizeFn(key)</span>\n</code></pre></div></li></ul><h3 id="npm" tabindex="-1"><code>Npm</code> <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h3><p><strong><code>Npm</code> 代指 <code>Node</code> 的模块生态，又 代指 模块安装CLI工具</strong></p><p><strong>通过 <code>package.json</code> 来描述项目的基本信息和依赖， 组成树状结构</strong></p><ul><li><p><strong>使用 <code>nvm</code> 管理 <code>node</code>版本</strong></p></li><li><p><strong>使用 <code>nrm</code> 管理 <code>npm</code>源</strong></p><ul><li><strong><code>sudo npm i -g nrm</code></strong></li><li><strong><code>nrm ls</code></strong></li><li><strong><code>nrm add &quot;url地址 -私有的 npm 包仓库&quot;</code></strong></li><li><strong><code>nrm use cnpm</code></strong></li></ul></li><li><p><strong>使用 <code>npx</code> 执行命令。 🍓🍓🍓</strong></p></li><li><p><strong><code>yarn</code> 加速包下载</strong></p></li><li><p><strong>使用 <code>scripts</code> 组织工程化脚本入口 🍓🍓🍓</strong></p></li></ul><h2 id="node-特点-能力" tabindex="-1"><code>Node</code> 特点/能力 <a class="header-anchor" href="#node-特点-能力" aria-hidden="true">#</a></h2><h3 id="能力" tabindex="-1">能力 <a class="header-anchor" href="#能力" aria-hidden="true">#</a></h3><ul><li><p><strong>跨平台能力</strong></p><blockquote><p>前端： web + h5</p><p>移动端: hybird</p><p>Pc端</p></blockquote></li><li><p><strong><code>Node</code>后端</strong></p><blockquote><p>核心特性 <code>web</code>应用</p><p>api-rpc</p><p>测试</p><p>部署</p><p>最佳实践</p><p>微服务</p><p>厂商支持</p></blockquote></li><li><p>前端</p><blockquote><p><code>react/vue/angular</code> 等等</p></blockquote></li><li><p>工具</p><blockquote><p>编译工具</p><p>构建工具</p><p>webpacl/gulp</p><p>工程化</p><p>Hack技巧</p><p>npm 等等...</p></blockquote></li></ul><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h3><ul><li><strong>不方便处理 计算密集型 的数据</strong></li><li><strong>适合处理 <code>高IO</code> 的 / 吞吐量比较大的。</strong></li></ul><h2 id="node-架构-✨-补充" tabindex="-1"><code>Node</code> 架构 ✨~补充 <a class="header-anchor" href="#node-架构-✨-补充" aria-hidden="true">#</a></h2><ul><li><p><code>V8</code></p><p><strong><code>Js引擎</code>，将<code> Js代码</code>编译成 机器码</strong></p></li><li><p><code>libuv</code></p><p><strong>提供异步功能的 <code>c库</code>，异步事件循环，维护一个线程池，抹平一些差异</strong></p></li><li><p><code>c-ares</code></p></li><li><p><code>crypto</code></p></li><li><p><code>http</code></p></li><li><p><code>zlib</code></p></li><li><p><code>C/C++</code> / <code>Binding</code></p><blockquote><p>就是 <code>C/C++/Js库</code> 的相互转换代码，暴露给 <code>Js</code> 环境，实现数据互通。</p></blockquote></li></ul>',26)];var c=n(t,[["render",function(n,o,e,t,c,l){return a(),s("div",null,p)}]]);export{e as __pageData,c as default};
