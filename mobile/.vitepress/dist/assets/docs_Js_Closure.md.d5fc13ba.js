import{_ as n,c as s,o as a,a as t}from"./app.9a3fef87.js";const p='{"title":"Js - 闭包","description":"","frontmatter":{},"headers":[{"level":2,"title":"环境 - 理解","slug":"环境-理解"},{"level":2,"title":"延伸 函数 中的环境生命周期","slug":"延伸-函数-中的环境生命周期"},{"level":2,"title":"构造函数 中 作用域的使用形态","slug":"构造函数-中-作用域的使用形态"},{"level":2,"title":"var - let 在for循环中的使用","slug":"var-let-在for循环中的使用"},{"level":3,"title":"var","slug":"var"},{"level":3,"title":"let","slug":"let"},{"level":3,"title":"模拟 var 的块作用域","slug":"模拟-var-的块作用域"},{"level":2,"title":"闭包","slug":"闭包"},{"level":3,"title":"什么是 闭包","slug":"什么是-闭包"},{"level":3,"title":"使用 闭包 获取区间商品","slug":"使用-闭包-获取区间商品"},{"level":3,"title":"闭包 - 实际开发 讲解~","slug":"闭包-实际开发-讲解"},{"level":2,"title":"闭包 内存泄漏解决办法 - 释放引用(释放内存)","slug":"闭包-内存泄漏解决办法-释放引用-释放内存"},{"level":2,"title":"this 的遗留问题","slug":"this-的遗留问题"}],"relativePath":"docs/Js/Closure.md","lastUpdated":1632740825000}',o={},c=[t('<h1 id="js-闭包" tabindex="-1">Js - <code>闭包</code> <a class="header-anchor" href="#js-闭包" aria-hidden="true">#</a></h1><h2 id="环境-理解" tabindex="-1"><code>环境</code> - 理解 <a class="header-anchor" href="#环境-理解" aria-hidden="true">#</a></h2><p><strong>环境如果不被需要 就会被 回收♻️</strong></p><p><strong>全局的环境是不会被回收的~</strong></p><p><strong>调用两次函数 就生成两次内存地址(两次的函数环境~)</strong></p><h2 id="延伸-函数-中的环境生命周期" tabindex="-1">延伸 <code>函数</code> 中的环境生命周期 <a class="header-anchor" href="#延伸-函数-中的环境生命周期" aria-hidden="true">#</a></h2><p><strong>如果我们创造的环境 在被使用 那就不删除</strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token comment">// 多次调用之后 gl() 还是多个2  开辟了三次引用地址 每次都是最新的~ 🍓🍓🍓</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// 这样 向外抛出  能够使得 sum() 一直在被使用 所以不会被清空 然后也会一直累加</span>\n<span class="token keyword">function</span> <span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 就是 sum 函数被外部引用了 而且被全局的环境变量引用 所以不会被回收♻️ - 🍓🍓🍓</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n</code></pre></div><h2 id="构造函数-中-作用域的使用形态" tabindex="-1"><code>构造函数</code> 中 作用域的使用形态 <a class="header-anchor" href="#构造函数-中-作用域的使用形态" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 其实构造函数这样 就类似与 下面这种写法---可以相对于闭包这么理解</span>\n<span class="token keyword">function</span> <span class="token function">Gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    sum<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\na<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nb<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n</code></pre></div><h2 id="var-let-在for循环中的使用" tabindex="-1"><code>var - let</code> 在for循环中的使用 <a class="header-anchor" href="#var-let-在for循环中的使用" aria-hidden="true">#</a></h2><h3 id="var" tabindex="-1">var <a class="header-anchor" href="#var" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 - 因为执行了 `for` 循环中的语句了 然后不符合 但是 `i` 也++了</span>\n</code></pre></div><h3 id="let" tabindex="-1">let <a class="header-anchor" href="#let" aria-hidden="true">#</a></h3><p><code>let</code> 就是外面访问不到了 但是也是会执行的~</p><p><strong><code>let</code> 在每次循环都创建一个内存空间 类似 立即执行函数</strong></p><h3 id="模拟-var-的块作用域" tabindex="-1">模拟 <code>var</code> 的块作用域 <a class="header-anchor" href="#模拟-var-的块作用域" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> i\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n<span class="token comment">// 因为调用的时候 会向上查找 也是执行完了 所以就打印 4 最后的执行结果了</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> i\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 </span>\n</code></pre></div><p><strong>如果包裹一层立即执行函数 他也是会往上面查找 然后发现 立即执行函数参数就有值 所以就每次都是一个 新空间 所以会按照顺序执行 - 🍓🍓🍓</strong></p><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h2><h3 id="什么是-闭包" tabindex="-1">什么是 <code>闭包</code> <a class="header-anchor" href="#什么是-闭包" aria-hidden="true">#</a></h3><p><strong><code>闭包</code> 就是函数可以访问其他作用域里面的内容就是闭包</strong></p><h3 id="使用-闭包-获取区间商品" tabindex="-1">使用 <code>闭包</code> 获取区间商品 <a class="header-anchor" href="#使用-闭包-获取区间商品" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">between</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> v <span class="token operator">&gt;=</span> a <span class="token operator">&amp;&amp;</span> v <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> filterArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filterArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 13]</span>\n</code></pre></div><h3 id="闭包-实际开发-讲解" tabindex="-1"><code>闭包</code> - 实际开发 讲解~ <a class="header-anchor" href="#闭包-实际开发-讲解" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>btns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这样是解决了抖动 但是加速会越来越快</span>\n  <span class="token comment">// let left = 1;</span>\n\n  <span class="token comment">// 解决 动画越来越快 的问题</span>\n  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 放在这里 每次点击都生成一次环境 每次 left 都重新执行 所以产生了抖动</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// flag = true; 或者 flag直接定于 定时器~</span>\n      flag <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="闭包-内存泄漏解决办法-释放引用-释放内存" tabindex="-1"><code>闭包</code> 内存泄漏解决办法 - 释放引用(释放内存) <a class="header-anchor" href="#闭包-内存泄漏解决办法-释放引用-释放内存" aria-hidden="true">#</a></h2><p><strong>手动赋空 <code>null</code> - 确定不需要使用的时候 赋值为空~. - 🍓🍓🍓</strong></p><h2 id="this-的遗留问题" tabindex="-1"><code>this</code> 的遗留问题 <a class="header-anchor" href="#this-的遗留问题" aria-hidden="true">#</a></h2><p><strong><code>this</code> 是当前 <code>function</code> 被定义的作用域</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token punctuation">{</span>\n  user<span class="token operator">:</span> <span class="token string">&quot;后盾人&quot;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> hd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// `window` 因为 `a` 在全局执行的 所以这里的 `this` 就指向 `window` 了</span>\n</code></pre></div><ul><li><p><strong>解决方法：</strong></p><p><strong>1 - 箭头函数 <code> () =&gt; {}</code></strong></p><p><strong>2 - 在外部定义一个变量保存 <code>this</code> - e.g: <code>let self = this;</code></strong></p></li></ul>',34)];var e=n(o,[["render",function(n,t,p,o,e,u){return a(),s("div",null,c)}]]);export{p as __pageData,e as default};
