import{_ as n,c as s,o as a,a as t}from"./app.f2ffefc6.js";const p='{"title":"Js - Sub","description":"","frontmatter":{},"headers":[{"level":2,"title":"Js - Sub","slug":"js-sub"},{"level":2,"title":"++操作","slug":"操作"},{"level":2,"title":"true && false","slug":"true-false"},{"level":2,"title":"for 循环","slug":"for-循环"},{"level":2,"title":"DOM","slug":"dom"},{"level":2,"title":"typeof - 判断定义变量","slug":"typeof-判断定义变量"},{"level":2,"title":"模版字符串&&label","slug":"模版字符串-label"},{"level":3,"title":"标签模版~ - 可以对标签里面的变量进行二次处理~","slug":"标签模版-可以对标签里面的变量进行二次处理"},{"level":2,"title":"值类型","slug":"值类型"},{"level":2,"title":"string","slug":"string"},{"level":3,"title":"对手机号进行模糊处理","slug":"对手机号进行模糊处理"},{"level":2,"title":"类型转换使用技巧","slug":"类型转换使用技巧"},{"level":3,"title":"显示转换成 Boolean","slug":"显示转换成-boolean"},{"level":2,"title":"值类型 和 引用类型的关联","slug":"值类型-和-引用类型的关联"},{"level":2,"title":"Math","slug":"math"},{"level":2,"title":"Date","slug":"date"},{"level":2,"title":"自己封装一个 时间处理 库 - 太酷了~","slug":"自己封装一个-时间处理-库-太酷了"},{"level":2,"title":"null && undefined","slug":"null-undefined"},{"level":2,"title":"let - const","slug":"let-const"}],"relativePath":"docs/Js/Sub.md","lastUpdated":1632732114000}',o={},e=[t('<h2 id="js-sub" tabindex="-1">Js - <code>Sub</code> <a class="header-anchor" href="#js-sub" aria-hidden="true">#</a></h2><p><strong>补充一些遗漏的知识点</strong></p><hr><blockquote><p><strong>&#39;use strict&#39; // 多使用 严格模式编写代码</strong></p></blockquote><hr><h2 id="操作" tabindex="-1"><code>++</code>操作 <a class="header-anchor" href="#操作" aria-hidden="true">#</a></h2><div class="language-js"><pre><code>既然 n<span class="token operator">+=</span><span class="token number">2</span> 那么 <span class="token operator">%=</span> <span class="token operator">|=</span> x<span class="token operator">=</span> <span class="token operator">/=</span> 都是可以的<span class="token operator">~</span>\n\n<span class="token operator">++</span>n n<span class="token operator">++</span> 不参与运算的时候结果都是一样的 参与运算的时候就需要注意了<span class="token operator">~</span>\n<span class="token comment">// 1+ ++n -&gt; n=n+1; 1+n;</span>\n<span class="token comment">// 1+ n++ -&gt; 1+n; n=n+1;</span>\n</code></pre></div><h2 id="true-false" tabindex="-1"><code>true</code> &amp;&amp; <code>false</code> <a class="header-anchor" href="#true-false" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token boolean">false</span> <span class="token operator">||</span> 执行的代码\n<span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> 执行的代码\n</code></pre></div><h2 id="for-循环" tabindex="-1"><code>for</code> 循环 <a class="header-anchor" href="#for-循环" aria-hidden="true">#</a></h2><p><strong>for循环参数 1-初始值 2-为true执行 3-改变变量(也可以作为执行代码)</strong></p><p><strong>break continue 是针对循环的 --- return是针对当前函数的~</strong></p><div class="language-js"><pre><code><span class="token comment">// for循环做label标签跳转 - 这种状态最适合 多层嵌套的时候使用</span>\ngl<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> gl<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 6 9</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// continue - break 都可以搭配标签做 运算</span>\n</code></pre></div><h2 id="dom" tabindex="-1"><code>DOM</code> <a class="header-anchor" href="#dom" aria-hidden="true">#</a></h2><ul><li><p><strong>DOM 节点元素 可以使用 for...of来遍历</strong></p></li><li><p><strong>\\t\\t \\n 在字符串中可以识别 但是html中只识别一个空格 ～ 如果还需要再加那就是 &amp;nbsp</strong></p></li></ul><div class="language-js"><pre><code>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div, span&#39;</span><span class="token punctuation">)</span> <span class="token comment">//  - 这样可以一次查找多个~</span>\n</code></pre></div><h2 id="typeof-判断定义变量" tabindex="-1"><code>typeof</code> - 判断定义变量 <a class="header-anchor" href="#typeof-判断定义变量" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// function</span>\n<span class="token keyword">typeof</span> 也可以用来判断 有没有定义变量 如果没有返回 <span class="token keyword">undefined</span><span class="token punctuation">;</span> 如果只声明但是未赋值 也是 <span class="token keyword">undefined</span>\n<span class="token keyword">let</span> a<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> ab<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre></div><h2 id="模版字符串-label" tabindex="-1">模版字符串&amp;&amp;<code>label</code> <a class="header-anchor" href="#模版字符串-label" aria-hidden="true">#</a></h2><ul><li><p><strong>模版字符串是可以嵌套的</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;a1&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;b1&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token operator">+</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">b=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a=a1b=b1 模版字符串是可以进行嵌套的</span>\n</code></pre></div></li></ul><h3 id="标签模版-可以对标签里面的变量进行二次处理" tabindex="-1">标签模版~ - 可以对标签里面的变量进行二次处理~ <a class="header-anchor" href="#标签模版-可以对标签里面的变量进行二次处理" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;haha&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;hbhb&#39;</span><span class="token punctuation">;</span>\ntag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,b=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;haha&quot;, &quot;hbhb&quot;]</span>\n  <span class="token comment">// 字符串的数量 是大于变量的 在 字符串的 标签模版里面~</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;a=&quot;, &quot;,b=&quot;, &quot;&quot;, raw: Array(3)]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><hr><h2 id="值类型" tabindex="-1">值类型 <a class="header-anchor" href="#值类型" aria-hidden="true">#</a></h2><hr><h2 id="string" tabindex="-1"><code>string</code> <a class="header-anchor" href="#string" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token string">&#39;string&#39;</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true // 查找开始的字符串 区分大小与 返回 true || false</span>\n<span class="token string">&#39;string&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span> <span class="token comment">// fasle // 查找结束的字符串 区分大小与 返回 true || false</span>\n\n<span class="token comment">// replace</span>\n<span class="token keyword">const</span> word <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;php&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&#39;我喜欢学习php和css&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> repaceStr <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// replace 不改变原字符串</span>\n  <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;a herf=&#39;#&#39;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>repaceStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="对手机号进行模糊处理" tabindex="-1">对手机号进行模糊处理 <a class="header-anchor" href="#对手机号进行模糊处理" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">phone</span><span class="token punctuation">(</span><span class="token parameter">mobile<span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>mobile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">phone</span><span class="token punctuation">(</span><span class="token number">15122266151</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 151********</span>\n</code></pre></div><h2 id="类型转换使用技巧" tabindex="-1">类型转换使用技巧 <a class="header-anchor" href="#类型转换使用技巧" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token comment">// string - number</span>\nstring<span class="token operator">*</span><span class="token number">1</span> <span class="token operator">+</span>string <span class="token function">Number</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token comment">// -有字符串的话就返回NaN (parseInt parseFloat)-如果字符串在前面就是 NaN了</span>\n<span class="token comment">// number - string</span>\nnumber<span class="token operator">+</span><span class="token string">&#39;&#39;</span> <span class="token function">String</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// string - array</span>\nstringify<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// array - string</span>\narray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> array<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> str <span class="token comment">// string</span>\n<span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> str1 <span class="token comment">// object</span>\n</code></pre></div><p><strong>为什么 str 也能 调对象的方法 呢 - 是因为系统会 隐式的帮助你转换 并 调用方法</strong></p><div class="language-js"><pre><code><span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span>  <span class="token comment">// 两个等号的时候 会隐式转换成 数值类型 false-0 true-1</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 相当于 Boolean(1) 去判断的</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 会隐式转换成数字 Number([]) === 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN 多个数值 就会转换成 NaN</span>\n<span class="token comment">// 但是 [] 是引用类型 所以 就会判断为true if判断的时候 引用类型 也就都为true</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="显示转换成-boolean" tabindex="-1">显示转换成 <code>Boolean</code> <a class="header-anchor" href="#显示转换成-boolean" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token operator">!</span> <span class="token operator">!</span><span class="token operator">!</span> <span class="token comment">// ! 一个 感叹号 做两件事情 取反和转换布尔类型</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="值类型-和-引用类型的关联" tabindex="-1">值类型 和 引用类型的关联 <a class="header-anchor" href="#值类型-和-引用类型的关联" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">-</span> 这个 引用类型 object\n<span class="token string">&#39;123&#39;</span> <span class="token number">123</span> <span class="token boolean">true</span> <span class="token operator">-</span> 这是 值类型 但是不妨碍 我们使用里面的方法 会隐式转换成对象来调用<span class="token operator">~</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>\nNumber<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 判断是不是一个 整数</span>\nNumber<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 判断是不是一个 NaN</span>\nObject<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;askjdksa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// 判断是不是一个 NaN</span>\nnumber<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 保留几位小数 整数就是 .0000 啥的-保留几位留几位 - 转换之后是字符串类型</span>\n<span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span> <span class="token comment">// false</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">&#39;78&#39;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 78</span>\n</code></pre></div><h2 id="math" tabindex="-1"><code>Math</code> <a class="header-anchor" href="#math" aria-hidden="true">#</a></h2><div class="language-js"><pre><code>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\nMath<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>\n</code></pre></div><h2 id="date" tabindex="-1"><code>Date</code> <a class="header-anchor" href="#date" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - 返回对象 可以 +new Date() 变成时间戳</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// - 返回字符串 就不可以进行转换操作了 会变成NaN</span>\nDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这样也能返回时间戳</span>\n</code></pre></div><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 标志一样就行</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1997-7-5 08:10:23&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 868061423000</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 868061423000</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 868061423000</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 868061423000</span>\n</code></pre></div><h2 id="自己封装一个-时间处理-库-太酷了" tabindex="-1">自己封装一个 时间处理 库 - 太酷了~ <a class="header-anchor" href="#自己封装一个-时间处理-库-太酷了" aria-hidden="true">#</a></h2><p><strong>获取月份的时候 是从0开始的 需要加一</strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token constant">YYYY</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token constant">MM</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token constant">DD</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token constant">HH</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    mm<span class="token operator">:</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    ss<span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    format <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> config<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> format<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1997-7-5 08:10:23&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1997-7-5 8:10:23</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1997-7-5 08:10:23&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;YYYY年MM月&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1997年7月</span>\n</code></pre></div><p><strong>优秀的 日期处理库 <code>momentjs</code> - 🍓 还是有很多便捷的 时间相关的方法 - 减少重复造轮子的过程</strong></p><h2 id="null-undefined" tabindex="-1"><code>null</code> &amp;&amp; <code>undefined</code> <a class="header-anchor" href="#null-undefined" aria-hidden="true">#</a></h2><p><strong>null-引用类型 与 undefined-基本类型值类型</strong></p><p><strong>如果要保存 引用类型 赋空 就是 null 基本值类型就是 undefined</strong></p><p><strong>未声明 或者 声明了未赋值 都是 undefined</strong></p><h2 id="let-const" tabindex="-1"><code>let</code> - <code>const</code> <a class="header-anchor" href="#let-const" aria-hidden="true">#</a></h2><p><strong>TDC 暂时性死区... let const - 不影响 window 变量</strong></p>',54)];var c=n(o,[["render",function(n,t,p,o,c,l){return a(),s("div",null,e)}]]);export{p as __pageData,c as default};
