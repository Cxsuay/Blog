import{_ as n,c as s,o as a,a as t}from"./app.9a3fef87.js";const o='{"title":"Vue - 组件","description":"","frontmatter":{},"headers":[{"level":2,"title":"自定义指令","slug":"自定义指令"},{"level":3,"title":"指令周期描述 (bind / inserted / update / unbind)","slug":"指令周期描述-bind-inserted-update-unbind"},{"level":3,"title":"指令周期 钩子函数描述 (el / binding / VNode / oldVNode)","slug":"指令周期-钩子函数描述-el-binding-vnode-oldvnode"},{"level":3,"title":"实操代码","slug":"实操代码"},{"level":2,"title":"双向绑定 (v-model / 表单处理 / 自定义组件 v-model 双向绑定)","slug":"双向绑定-v-model-表单处理-自定义组件-v-model-双向绑定"},{"level":3,"title":"Vue 是单向数据流的","slug":"vue-是单向数据流的"},{"level":2,"title":"组件设计","slug":"组件设计"},{"level":2,"title":"组件通信","slug":"组件通信"},{"level":2,"title":"插件","slug":"插件"},{"level":2,"title":"组件复用","slug":"组件复用"}],"relativePath":"docs/Vue/Component.md","lastUpdated":1632732114000}',e={},p=[t('<h1 id="vue-组件" tabindex="-1">Vue - <code>组件</code> <a class="header-anchor" href="#vue-组件" aria-hidden="true">#</a></h1><h2 id="自定义指令" tabindex="-1">自定义指令 <a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a></h2><h3 id="指令周期描述-bind-inserted-update-unbind" tabindex="-1">指令周期描述 <code>(bind / inserted / update / unbind)</code> <a class="header-anchor" href="#指令周期描述-bind-inserted-update-unbind" aria-hidden="true">#</a></h3><p><strong>🍓🍓🍓 一般都是 将 <code>DOM/BOM</code> 操作 和 逻辑 解耦，以便于 <code>代码 methods 方法</code> 更方便做 单元测试</strong></p><div class="language-jsx"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 第一次绑定时调用 / 可以进行初始化设置</span>\n  <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 插入到父节点使用 / 保证父节点存在，但不保证已经插入</span>\n  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 组件的 `VNode` 更新时调用 / 可能发生在 子VNode 更新之前 / 可以通过比较前后的值来忽略 不必要的模版更新</span>\n  <span class="token function-variable function">update</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 指令与元素 解绑时 调用。</span>\n  <span class="token function-variable function">unbind</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-demo</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ul><li><p><strong><code>bind</code></strong></p><p><strong>只调用一次， 指令第一次绑定到元素的时候 调用</strong></p><p><strong>在这里 可以进行一次性 的初始化设置</strong></p></li><li><p><strong><code>inserted</code></strong></p><p><strong>被绑定的元素 插入到父节点 时 调用</strong></p><p><strong>(仅保证 父节点存在， 但不一定 但是不一定被 插入到文档中)</strong></p></li></ul><blockquote><p><strong><code>bind</code> 中 <code>el.parentNode</code> 为 <code>null</code>。</strong></p><p><strong><code>inserted</code> 中可通过 <code>el.parentNode</code> 访问当前节点的 父节点。</strong></p><p><strong><code>inserted</code> 钩子函数的频率 要高于 <code>bind</code> 函数。</strong></p></blockquote><ul><li><p><strong><code>update</code></strong></p><p><strong>所在组件的 <code>VNode</code> 更新时调用。</strong></p><p><strong>但是可能发生在其 <code>子VNode</code> 更新之前。</strong></p><p><strong>指令的值 可能发生了改变， 也可能没有。</strong></p><p><strong>但是可以通过 比较更新前后的值 来 忽略不必要的模版更新。</strong></p></li><li><p><strong><code>componentUpdate</code></strong></p><p><strong>指令所在组件的 <code>VNode</code> 以及 <code>VNode</code> 全部更新后 调用</strong></p></li><li><p><strong><code>unbind</code></strong></p><p><strong>只调用一次， 指令与元素 解绑的时候 被调用。</strong></p></li></ul><h3 id="指令周期-钩子函数描述-el-binding-vnode-oldvnode" tabindex="-1">指令周期 钩子函数描述 <code>(el / binding / VNode / oldVNode)</code> <a class="header-anchor" href="#指令周期-钩子函数描述-el-binding-vnode-oldvnode" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token punctuation">{</span>\n  el<span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token comment">// binding</span>\n    name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> expression<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> modifiers\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  vnode<span class="token punctuation">,</span>\n \toldVNode\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><p><strong><code>el</code></strong></p><p><strong>指令所 绑定的元素，可以用来直接操作 DOM</strong></p></li><li><p><strong><code>binding</code></strong></p><p><strong><code>binding</code> 对象</strong></p><ul><li><code>name</code> - 指令名， 不包括 <code>v-</code> 前缀</li><li><code>value</code> - 指令的绑定值，例如： <code>v-my-directive=&quot;1 + 1&quot; </code>中， 绑定值为 2</li><li><code>oldvalue</code> - 指定绑定的前一个值， 仅在 <code>update</code> 和 <code>componentUpdate</code> 钩子中可用</li><li><code>expression</code> - 字符串形式的指令表达式。 例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中， 表达式为 <code>1 + 1</code></li><li><code>arg</code> - 传给指令的参数，可选。 例如：<code>v-my-directive:foo</code> 中， 参数为: <code>&quot;foo&quot;</code></li><li><code>modifiers</code> - 一个包含修饰符的对象 例如: <code>v-my-directive.foo.bar</code> 中 修饰符对象为 <code>{ foo: true, bar: true }</code></li></ul></li><li><p><strong><code>vnode</code></strong></p><p><strong><code>vue</code> 编译生成的 虚拟节点</strong></p></li><li><p><strong><code>oldVNode</code></strong></p><p><strong>上一个虚拟节点， 尽在 <code>update</code> 和 <code>componentUpdate</code> 钩子中可用</strong></p></li></ul><p><strong>除了 <code>el</code> 之外， 其他参数应该都是 只读的，切勿 进行修改。如果需要在钩子之间共享数据，仅以通过元素的 <code>dataset</code> 来进行。</strong></p><p><strong>🍓🍓🍓当我们的 <code>methods</code> 中存在的操作 <code>DOM</code>/<code>BOM</code> 的逻辑时， 就该思考 可否 抽象成一个 自定义指令？</strong></p><p><strong>🍓🍓🍓 这样更容易被 单元测试。</strong></p><h3 id="实操代码" tabindex="-1">实操代码 <a class="header-anchor" href="#实操代码" aria-hidden="true">#</a></h3><div class="language-jsx"><pre><code><span class="token comment">/*\n\t1. v-resize 指令，监听 窗口大小改变， 通过监听函数 onResize 响应。\n\t2. 可通过 direction 控制监听页面高度 或者 宽度的变化 v-resize:[direction].quiet=&quot;onResize&quot;\n\t3. 可通过修饰符 .quiet 来控制是否只在 指令初始化的时候 响应 onResize函数\n*/</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-resize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onResize<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">window width is: </span><span class="token punctuation">{</span><span class="token punctuation">{</span> length <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      direction<span class="token operator">:</span> <span class="token string">&#39;verical&#39;</span><span class="token punctuation">,</span>\n      length<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">onResize</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nVue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 插入到父节点的时候 调用</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> modifiers <span class="token punctuation">}</span> <span class="token operator">=</span> binding<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> callback <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 绑定值 e.g. v-a=&quot;1+1&quot; 绑定值为 2</span>\n    <span class="token keyword">const</span> direction <span class="token operator">=</span> arg<span class="token punctuation">;</span> <span class="token comment">// 传给指令的参数 e.g. v-a:foo 参数为 foo</span>\n    <span class="token keyword">const</span> modifiers <span class="token operator">=</span> modifiers<span class="token punctuation">;</span> <span class="token comment">// 一个包含修饰符的对象 e.g. v-a.foo.bar 中的修饰符对象为 { foo: true, bar: true }</span>\n    \n    <span class="token keyword">const</span> <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> direction <span class="token operator">===</span> <span class="token string">&#39;verical&#39;</span> <span class="token operator">?</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">:</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">onResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> onResize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>modifiers <span class="token operator">||</span> <span class="token operator">!</span>modifiers<span class="token punctuation">.</span>quiet<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// quiet &lt;-&gt; 安静的，平静的</span>\n      <span class="token function">onResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 就在 inserted 调用的时候 会 调用一次。</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">// 除了 el 之外，其他数据都是只读的</span>\n    <span class="token comment">// 所以我们可以把 共享的数据 放置在 el 上</span>\n    el<span class="token punctuation">.</span>_onResize <span class="token operator">=</span> onResize<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">unbind</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>_onResize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el<span class="token punctuation">.</span>_onResize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">delete</span> el<span class="token punctuation">.</span>_onResize<span class="token punctuation">;</span> <span class="token comment">// ✨✨✨</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="双向绑定-v-model-表单处理-自定义组件-v-model-双向绑定" tabindex="-1">双向绑定 <code>(v-model / 表单处理 / 自定义组件 v-model 双向绑定)</code> <a class="header-anchor" href="#双向绑定-v-model-表单处理-自定义组件-v-model-双向绑定" aria-hidden="true">#</a></h2><h3 id="vue-是单向数据流的" tabindex="-1"><code>Vue</code> 是单向数据流的 <a class="header-anchor" href="#vue-是单向数据流的" aria-hidden="true">#</a></h3><h2 id="组件设计" tabindex="-1">组件设计 <a class="header-anchor" href="#组件设计" aria-hidden="true">#</a></h2><h2 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-hidden="true">#</a></h2><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-hidden="true">#</a></h2><h2 id="组件复用" tabindex="-1">组件复用 <a class="header-anchor" href="#组件复用" aria-hidden="true">#</a></h2>',22)];var c=n(e,[["render",function(n,t,o,e,c,l){return a(),s("div",null,p)}]]);export{o as __pageData,c as default};
