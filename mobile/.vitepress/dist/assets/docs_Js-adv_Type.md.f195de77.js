import{_ as n,c as s,o as a,a as t}from"./app.9a3fef87.js";const o='{"title":"Js - 类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"原始类型 和 对象类型 的区别","slug":"原始类型-和-对象类型-的区别"},{"level":2,"title":"类型转换","slug":"类型转换"},{"level":3,"title":"类型转换 - Show","slug":"类型转换-show"},{"level":3,"title":"显式类型转换","slug":"显式类型转换"}],"relativePath":"docs/Js-adv/Type.md","lastUpdated":1632732114000}',e={},p=[t('<h1 id="js-类型" tabindex="-1">Js - <code>类型</code> <a class="header-anchor" href="#js-类型" aria-hidden="true">#</a></h1><h2 id="原始类型-和-对象类型-的区别" tabindex="-1">原始类型 和 对象类型 的区别 <a class="header-anchor" href="#原始类型-和-对象类型-的区别" aria-hidden="true">#</a></h2><p><strong>数据类型分为 原始类型 和 对象类型</strong></p><ul><li><p><strong><code>原始类型</code></strong></p><ul><li><code>Number</code></li><li><code>String</code></li><li><code>Boolean</code></li><li><code>Symbol</code></li><li><code>null</code></li><li><code>undefined</code></li></ul><hr><p><strong>原始类型的值 无法修改，<code>e.g.</code> 字符串中的所有修改的方法，返回的是 一个新的字符串，并不会改变原来的字符串。</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>\na<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span>\na <span class="token comment">// &#39;abc&#39;</span>\n\n<span class="token comment">// ------ ------ ------ ------ ------</span>\n<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;ABC&#39;</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns <span class="token comment">// &#39;ABC&#39;</span>\n</code></pre></div><p><strong>比较 原始类型 是否相等，是比较的他们的值。</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nn1 <span class="token operator">===</span> n2 <span class="token comment">// true</span>\n</code></pre></div></li><li><p><code>对象类型</code></p><p><strong>对象的值 是可以修改的</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\no<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> o<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { x: 2, y: 3 }</span>\n<span class="token keyword">delete</span> o<span class="token punctuation">.</span>x<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { y: 3 }</span>\n</code></pre></div><p><strong>比较 对象类型 是否相等， 不是比较他们的值。</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><p>对象类型 又叫 引用类型， 当给一个变量 赋值 为对象时，该变量保存的是 该对象 在内存中的地址。</p><p><strong>对象的比较是在比较 引用地址： <code>当且仅当</code> 他们的引用是 同一个对象时，他们才相等。 (<code>内存地址相等</code>)</strong></p></li><li><p><strong>复制变量的值 🍓🍓🍓</strong></p><p>想复制某个变量的值，只要将它赋值给<code>另外一个变量</code>(或者是某个对象的属性)。 <strong>复制原始类型和对象类型 有所不同。</strong></p><ul><li><p><strong>复制 <code>原始类型</code> 的变量值</strong></p><blockquote><p><strong>会将值 拷贝一份， 和原来的值 相互独立。</strong></p></blockquote></li><li><p><strong>复制 <code>对象类型</code> 的变量值</strong></p><blockquote><p><strong>会将存储在 变量中的值拷贝一份， 也就是它所指向的对象在内存中的地址值。</strong></p><p><strong>复制操作结束后，他们俩指向了 同一个对象。</strong></p></blockquote></li></ul><p><strong>如果想要复制对象的副本，则必须 显式 地复制对象的每个属性 (如果对象是 数组，就复制数组的每个元素。)</strong></p></li></ul><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-hidden="true">#</a></h2><blockquote><p>掌握类型转换的场景 和 类型识别的方法</p></blockquote><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;52&#39;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;5&#39;</span> <span class="token operator">-</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">+</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// NaN 🍓🐷~</span>\n<span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot; 🍓🐷~</span>\n</code></pre></div><ul><li><p><strong>🍓<code>转字符串</code></strong></p><blockquote><p><strong>经常出现在 <code>+</code> 运算符中，并且其中有一个操作数，不是数值类型。</strong></p></blockquote><div class="language-js"><pre><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 4px5</span>\n    s <span class="token operator">=</span> <span class="token number">123e-2</span> <span class="token operator">+</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 123e-2a</span>\n</code></pre></div></li><li><p><strong><code>🍓转数值</code></strong></p><blockquote><p>经常出现在 <code>数学运算</code> 中， 表示 <strong>链接字符串的 <code>+</code> 运算符除外</strong></p></blockquote><div class="language-js"><pre><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// +s -&gt; NaN 🍓🐷~ / -s -&gt; NaN 🍓🐷~</span>\n    s <span class="token operator">=</span> <span class="token string">&#39; 123 &#39;</span><span class="token punctuation">;</span> <span class="token comment">// +s -&gt; 123 🍓🐷~ / -s -&gt; -123 🍓🐷~</span>\n</code></pre></div></li><li><p><strong><code>🍓转布尔</code></strong></p><blockquote><p>经常出现在 <code>if</code>语句中， 逻辑运算中。</p></blockquote><div class="language-js"><pre><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;abc&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div></li><li><p><strong><code>相等</code></strong></p><blockquote><p><code>==</code> 运算符 会有类型转换。</p><p><code>===</code> 运算符 不会进行类型转换。</p></blockquote><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相等</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在比较之前 \t字符串转换成数字</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在比较之前 布尔转化成数字</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在比较之前 字符串和布尔值都转换成数字</span>\n</code></pre></div></li></ul><h3 id="类型转换-show" tabindex="-1">类型转换 - <code>Show</code> <a class="header-anchor" href="#类型转换-show" aria-hidden="true">#</a></h3><blockquote><p><code>\\</code> 代表的就是 本身就是这个类型。</p></blockquote><table><thead><tr><th>值</th><th>转字符串</th><th>转数值</th><th>转布尔</th><th>转对象</th></tr></thead><tbody><tr><td><code>undefined</code></td><td><code>&#39;undefined&#39;</code></td><td><code>NAN</code></td><td><code>false</code></td><td><code>TypeError</code></td></tr><tr><td><code>null</code></td><td><code>&#39;null&#39;</code></td><td><code>0</code></td><td><code>false</code></td><td><code>TypeError</code></td></tr><tr><td><code>true</code></td><td><code>&#39;true&#39;</code></td><td><code>1</code></td><td><code>\\</code></td><td><code>new Boolean(true)</code></td></tr><tr><td><code>false</code></td><td><code>&#39;false&#39;</code></td><td><code>0</code></td><td><code>\\</code></td><td><code>new Boolean(false)</code></td></tr><tr><td><code>&#39;&#39;</code></td><td><code>\\</code></td><td><code>0</code></td><td><code>false</code></td><td><code>new String(&#39;&#39;)</code></td></tr><tr><td><code>&#39;1.2&#39;</code></td><td><code>\\</code></td><td><code>1.2</code></td><td><code>true</code></td><td><code>new String(&#39;1.2&#39;)</code></td></tr><tr><td><code>&#39;abc&#39;</code></td><td><code>\\</code></td><td><code>NaN</code></td><td><code>true</code></td><td><code>new String(abc)</code></td></tr><tr><td><code>0</code></td><td><code>&#39;0&#39;</code></td><td><code>\\</code></td><td><code>false</code></td><td><code>new Number(0)</code></td></tr><tr><td><code>-0</code></td><td><code>0</code></td><td><code>\\</code></td><td><code>false</code></td><td><code>new Number(0)</code></td></tr><tr><td><code>NaN</code></td><td><code>NaN</code></td><td><code>\\</code></td><td><code>false</code></td><td><code>new Number(NaN)</code></td></tr><tr><td><code>Infinity</code></td><td><code>Infinity</code></td><td><code>\\</code></td><td><code>true</code></td><td><code>new Number(Infinity)</code></td></tr><tr><td><code>-Infinity</code></td><td><code>-Infinity</code></td><td><code>\\</code></td><td><code>true</code></td><td><code>new Number(-Infinity)</code></td></tr><tr><td><code>{}任意对象</code></td><td><code>~</code></td><td><code>~</code></td><td><code>true</code></td><td><code>\\</code></td></tr><tr><td><code>[]空数组</code></td><td><code>&#39;&#39;</code></td><td><code>0</code></td><td><code>true</code></td><td><code>\\</code></td></tr><tr><td><code>[9]数字元素</code></td><td><code>&#39;9&#39;</code></td><td><code>9</code></td><td><code>true</code></td><td><code>\\</code></td></tr><tr><td><code>[&#39;a&#39;]其他数组</code></td><td><code>使用join方法</code></td><td><code>NaN</code></td><td><code>true</code></td><td><code>\\</code></td></tr><tr><td><code>function() {}任意函数</code></td><td><code>~</code></td><td><code>NaN</code></td><td><code>true</code></td><td><code>\\</code></td></tr></tbody></table><h3 id="显式类型转换" tabindex="-1">显式类型转换 <a class="header-anchor" href="#显式类型转换" aria-hidden="true">#</a></h3>',12)];var c=n(e,[["render",function(n,t,o,e,c,d){return a(),s("div",null,p)}]]);export{o as __pageData,c as default};
