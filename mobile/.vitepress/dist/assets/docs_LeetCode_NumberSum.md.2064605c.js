import{_ as n,c as s,o as a,a as p}from"./app.57c139fc.js";const t='{"title":"每日算法 - **数之和","description":"","frontmatter":{},"headers":[{"level":2,"title":"两数之和","slug":"两数之和"},{"level":3,"title":"示例 1：","slug":"示例-1："},{"level":3,"title":"示例 2：","slug":"示例-2："},{"level":3,"title":"示例 3：","slug":"示例-3："},{"level":3,"title":"[Js]题解：","slug":"js-题解："},{"level":2,"title":"两数之和 II - 输入有序数组","slug":"两数之和-ii-输入有序数组"},{"level":3,"title":"示例 1：","slug":"示例-1：-1"},{"level":3,"title":"示例 2：","slug":"示例-2：-1"},{"level":3,"title":"示例 3：","slug":"示例-3：-1"},{"level":3,"title":"[Js]题解：","slug":"js-题解：-1"},{"level":2,"title":"三数之和","slug":"三数之和"},{"level":3,"title":"示例 1：","slug":"示例-1：-2"},{"level":3,"title":"示例 2：","slug":"示例-2：-2"},{"level":3,"title":"示例 3：","slug":"示例-3：-2"},{"level":3,"title":"[Js]题解：","slug":"js-题解：-2"},{"level":2,"title":"四数之和","slug":"四数之和"},{"level":3,"title":"示例 1：","slug":"示例-1：-3"},{"level":3,"title":"示例 2：","slug":"示例-2：-3"},{"level":3,"title":"[Js]题解：","slug":"js-题解：-3"}],"relativePath":"docs/LeetCode/NumberSum.md","lastUpdated":1633426866815}',o={},e=[p('<h1 id="每日算法-数之和" tabindex="-1">每日算法 - <code>**</code>数之和 <a class="header-anchor" href="#每日算法-数之和" aria-hidden="true">#</a></h1><blockquote><p>两数之和就好比英语的<code>abandon</code>，几乎是每个同学必刷的。所以，我这个小破站的第一篇算法记录，就非它莫属啦。</p></blockquote><blockquote><p>如果每天做一道算法题，那是不是每天都在进步？</p><p>目的：培养算法思维，了解常见的算法。</p></blockquote><h2 id="两数之和" tabindex="-1">两数之和 <a class="header-anchor" href="#两数之和" aria-hidden="true">#</a></h2><p><strong><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener noreferrer">1. 两数之和 / <code>leetcode</code>链接🔗</a></strong></p><blockquote><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 和为目标值 <code>target</code> 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，<strong>数组中同一个元素在答案里不能重复出现。</strong></p><p>你可以按任意顺序返回答案。</p></blockquote><h3 id="示例-1：" tabindex="-1">示例 1： <a class="header-anchor" href="#示例-1：" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nums = [2,7,11,15], target = 9</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[0,1]</span><span class="token template-punctuation string">`</span></span>\n解释：因为 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nums[0] + nums[1] == 9</span><span class="token template-punctuation string">`</span></span> ，返回 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[0, 1] </span><span class="token template-punctuation string">`</span></span>。\n</code></pre></div><h3 id="示例-2：" tabindex="-1">示例 2： <a class="header-anchor" href="#示例-2：" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nums = [3,2,4], target = 6</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[1,2]</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><h3 id="示例-3：" tabindex="-1">示例 3： <a class="header-anchor" href="#示例-3：" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nums = [3,3], target = 6</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[0,1]</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p><strong>提示：</strong></p><ul><li><strong><code>2 &lt;= nums.length &lt;= 104</code></strong></li><li><strong><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></strong></li><li><strong><code>-109 &lt;= target &lt;= 109</code></strong></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</strong></p><h3 id="js-题解：" tabindex="-1"><code>[Js]</code>题解： <a class="header-anchor" href="#js-题解：" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>双层<span class="token keyword">for</span>循环嵌套\n<span class="token comment">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code>利用数组方法判断 <span class="token operator">-</span> 本质上也是 双层<span class="token keyword">for</span>循环嵌套\n<span class="token comment">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> nums_j <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>nums_j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断边界~</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code>空间换时间 <span class="token operator">-</span> 边存边查<span class="token operator">~</span> 可利用<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Map</span><span class="token template-punctuation string">`</span></span>或者<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Object</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> nums_j <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>nums_j<span class="token punctuation">]</span> <span class="token operator">||</span> obj<span class="token punctuation">[</span>nums_j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>nums_j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        obj<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code>空间换时间 <span class="token operator">-</span> 双<span class="token keyword">for</span>循环平级，时间复杂度为n<span class="token operator">~</span>\n<span class="token comment">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      obj<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> nums_j <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>nums_j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>nums_j<span class="token punctuation">]</span> <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>nums_j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="两数之和-ii-输入有序数组" tabindex="-1">两数之和 II - 输入有序数组 <a class="header-anchor" href="#两数之和-ii-输入有序数组" aria-hidden="true">#</a></h2><p><strong><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener noreferrer">167. 两数之和 II - 输入有序数组 / <code>leetcode</code>链接🔗</a></strong></p><blockquote><p>给定一个已按照 非递减顺序排列 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p><p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值。<code>numbers</code> 的下标 从 <code>1</code> 开始计数 ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length </code> 。</p><p>你可以假设每个输入 只对应唯一的答案 ，而且你 <strong>不可以 重复使用相同的元素</strong>。</p></blockquote><h3 id="示例-1：-1" tabindex="-1">示例 1： <a class="header-anchor" href="#示例-1：-1" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">numbers = [2,7,11,15], target = 9</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[1,2]</span><span class="token template-punctuation string">`</span></span>\n解释：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2。</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><h3 id="示例-2：-1" tabindex="-1">示例 2： <a class="header-anchor" href="#示例-2：-1" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">numbers = [2,3,4], target = 6</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[1,3]</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><h3 id="示例-3：-1" tabindex="-1">示例 3： <a class="header-anchor" href="#示例-3：-1" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">numbers = [-1,0], target = -1</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[1,2]</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p><strong>提示：</strong></p><ul><li><p><strong><code>2 &lt;= numbers.length &lt;= 3 * 10^4</code></strong></p></li><li><p><strong><code>-1000 &lt;= numbers[i] &lt;= 1000</code></strong></p></li><li><p><strong><code>numbers</code> 按 非递减顺序 排列</strong></p></li><li><p><strong><code>-1000 &lt;= target &lt;= 1000</code></strong></p></li><li><p><strong>仅存在一个有效答案</strong></p></li></ul><h3 id="js-题解：-1" tabindex="-1"><code>[Js]</code>题解： <a class="header-anchor" href="#js-题解：-1" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>二分查找\n<span class="token comment">/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">numbers<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> l<span class="token punctuation">,</span> r <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> numbers_j<span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        numbers_j <span class="token operator">=</span> target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 目标值</span>\n        l <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 🍓l - 永远都等于 i + 1 这里也是len - 1 的原因~</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 中位数</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers_j <span class="token operator">&gt;</span> numbers<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 更新起点</span>\n                l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers_j <span class="token operator">&lt;</span> numbers<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 更新终点</span>\n                r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 等于 则取值</span>\n                <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code>双指针\n<span class="token comment">/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">numbers<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> l<span class="token punctuation">,</span> r <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            r<span class="token operator">--</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            l<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="三数之和" tabindex="-1">三数之和 <a class="header-anchor" href="#三数之和" aria-hidden="true">#</a></h2><p><strong><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener noreferrer">15. 三数之和 / <code>leetcode</code>链接🔗</a></strong></p><blockquote><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <code>a，b，c </code>，使得 <code>a + b + c = 0 </code>？请你<strong>找出所有和为 <code>0</code> 且不重复的三元组</strong>。</p><p><strong>注意：答案中不可以包含重复的三元组。</strong></p></blockquote><h3 id="示例-1：-2" tabindex="-1">示例 1： <a class="header-anchor" href="#示例-1：-2" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nums = [-1,0,1,2,-1,-4]</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[[-1,-1,2],[-1,0,1]]</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><h3 id="示例-2：-2" tabindex="-1">示例 2： <a class="header-anchor" href="#示例-2：-2" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nums = []</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[]</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><h3 id="示例-3：-2" tabindex="-1">示例 3： <a class="header-anchor" href="#示例-3：-2" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nums = [0]</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[]</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p><strong>提示：</strong></p><ul><li><strong><code>0 &lt;= nums.length &lt;= 3000</code></strong></li><li><strong><code>-105 &lt;= nums[i] &lt;= 105</code></strong></li></ul><h3 id="js-题解：-2" tabindex="-1"><code>[Js]</code>题解： <a class="header-anchor" href="#js-题解：-2" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>暴力循环嵌套\n<span class="token comment">/**\n * @param {number[]} nums\n * @return {number[][]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">threeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token comment">// 判断边界</span>\n    \n    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 如果第一个就大于0 直接跳出... 就是没有</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 答案不包含重复 所以跳过 - 去重</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">&gt;</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> addRes <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>addRes <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 也可以利用对象去重</span>\n<span class="token keyword">function</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code>三指针求和\n<span class="token comment">/**\n * @param {number[]} nums\n * @return {number[][]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">threeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token comment">// 判断边界</span>\n    <span class="token keyword">let</span> i<span class="token punctuation">,</span> l <span class="token punctuation">,</span> r<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>\n    \n    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        \n        <span class="token comment">// 双指针移动</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                l<span class="token operator">++</span><span class="token punctuation">;</span>\n                <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 去重</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                r<span class="token operator">--</span><span class="token punctuation">;</span>\n                <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 去重</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 相等的情况下</span>\n                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                l<span class="token operator">++</span><span class="token punctuation">;</span>\n                r<span class="token operator">--</span><span class="token punctuation">;</span>\n                <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 去重</span>\n                <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 去重</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="四数之和" tabindex="-1">四数之和 <a class="header-anchor" href="#四数之和" aria-hidden="true">#</a></h2><p><strong><a href="https://leetcode-cn.com/problems/4sum/" target="_blank" rel="noopener noreferrer">18. 四数之和 / <code>leetcode</code>链接🔗</a></strong></p><blockquote><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你<strong>找出并返回满足下述全部条件且不重复的四元组 <code>[nums[a], nums[b], nums[c], nums[d]] ：</code></strong></p><ul><li><strong><code>0 &lt;= a, b, c, d &lt; n</code></strong></li><li><strong><code>a、b、c 和 d 互不相同</code></strong></li><li><strong><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></strong></li></ul><p><strong>你可以按 任意顺序 返回答案 。</strong></p></blockquote><h3 id="示例-1：-3" tabindex="-1">示例 1： <a class="header-anchor" href="#示例-1：-3" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nums = [1,0,-1,0,-2,2], target = 0</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><h3 id="示例-2：-3" tabindex="-1">示例 2： <a class="header-anchor" href="#示例-2：-3" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>输入：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nums = [2,2,2,2,2], target = 8</span><span class="token template-punctuation string">`</span></span>\n输出：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[[2,2,2,2]]</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p><strong>提示：</strong></p><ul><li><strong><code>1 &lt;= nums.length &lt;= 200</code></strong></li><li><strong><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></strong></li><li><strong><code>-10^9 &lt;= target &lt;= 10^9</code></strong></li></ul><h3 id="js-题解：-3" tabindex="-1"><code>[Js]</code>题解： <a class="header-anchor" href="#js-题解：-3" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>指针求和\n<span class="token comment">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">fourSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>\n    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">const</span> min1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>min1 <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> max1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 跳过本次不跳出 是因为 nums[i] 是依次递增的~</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>max1 <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">const</span> min2 <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>min2 <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> max2 <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>max2 <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    r<span class="token operator">--</span><span class="token punctuation">;</span>\n                    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    l<span class="token operator">++</span><span class="token punctuation">;</span>\n                    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    l<span class="token operator">++</span><span class="token punctuation">;</span>\n                    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>\n                    r<span class="token operator">--</span><span class="token punctuation">;</span>\n                    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',59)];var c=n(o,[["render",function(n,p,t,o,c,u){return a(),s("div",null,e)}]]);export{t as __pageData,c as default};
