import{_ as n,c as s,o as a,a as t}from"./app.9a3fef87.js";const p='{"title":"Js - Symbol","description":"","frontmatter":{},"headers":[{"level":2,"title":"Symbol 使用","slug":"symbol-使用"},{"level":2,"title":"声明定义 Symbol 的的几种方式","slug":"声明定义-symbol-的的几种方式"},{"level":2,"title":"Symbol.for","slug":"symbol-for"},{"level":2,"title":"Symbol.keyFor()","slug":"symbol-keyfor"},{"level":2,"title":"使用 Symbol 解决字符串耦合的问题~","slug":"使用-symbol-解决字符串耦合的问题"},{"level":2,"title":"Symbol 在缓存容器中的使用","slug":"symbol-在缓存容器中的使用"},{"level":2,"title":"Symbol - 扩展性与对象属性保护","slug":"symbol-扩展性与对象属性保护"},{"level":3,"title":"如果想要遍历 对象里面的 Symbol 属性","slug":"如果想要遍历-对象里面的-symbol-属性"}],"relativePath":"docs/Js/Symbol.md","lastUpdated":1632732114000}',o={},c=[t('<h1 id="js-symbol" tabindex="-1">Js - <code>Symbol</code> <a class="header-anchor" href="#js-symbol" aria-hidden="true">#</a></h1><h2 id="symbol-使用" tabindex="-1"><code>Symbol</code> 使用 <a class="header-anchor" href="#symbol-使用" aria-hidden="true">#</a></h2><p><strong><code>Symbol</code> 代表唯一值</strong></p><h2 id="声明定义-symbol-的的几种方式" tabindex="-1">声明定义 <code>Symbol</code> 的的几种方式 <a class="header-anchor" href="#声明定义-symbol-的的几种方式" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// () 里面可以添加 一些描述 e.g: Symbol(&#39;郭霖&#39;)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> gl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// symbol</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol()</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol()</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// description 就是提供一个 symbol 的描述</span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false;</span>\n</code></pre></div><h2 id="symbol-for" tabindex="-1"><code>Symbol.for</code> <a class="header-anchor" href="#symbol-for" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">let</span> a1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里声明了 gl 描述的 symbol值</span>\n<span class="token keyword">let</span> b1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里再次声明的时候 先去查找有没有相同描述的 如果有就直接引用了~</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(gl)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1 <span class="token operator">===</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h2 id="symbol-keyfor" tabindex="-1"><code>Symbol.keyFor()</code> <a class="header-anchor" href="#symbol-keyfor" aria-hidden="true">#</a></h2><p><strong><code>Symbol.keyFor();</code> - 这个只跟 <code>Symbol.for</code> 有关系 如果只是指定了个 <code>Symbol</code> 值 会打印 <code>undefined</code></strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里会在全局的定义里面进行保存~</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl</span>\n<span class="token keyword">let</span> ab <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;gl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个是只是没有定义在全局~</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre></div><h2 id="使用-symbol-解决字符串耦合的问题" tabindex="-1">使用 <code>Symbol</code> 解决字符串耦合的问题~ <a class="header-anchor" href="#使用-symbol-解决字符串耦合的问题" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;gl&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;gl&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;guolin&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同样的字符串类型 后面的就会把前面的覆盖掉~</span>\n\n<span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>\n  key<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> user2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>\n  key<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>user1<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>user2<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;gl2&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {Symbol(): {…}, Symbol(): {…}} // 这样就有两个属性了~</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>user2<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;gl2&#39; }</span>\n</code></pre></div><h2 id="symbol-在缓存容器中的使用" tabindex="-1"><code>Symbol</code> 在缓存容器中的使用 <a class="header-anchor" href="#symbol-在缓存容器中的使用" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">static</span> <span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">static</span> <span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Cache.set(&#39;name&#39;, &#39;gl&#39;)</span>\n<span class="token comment">// Cache.get(&#39;name&#39;) // gl</span>\n<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span>\n  key<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;User 信息&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> cart <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span>\n  key<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;购物车信息&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>key<span class="token punctuation">,</span> user<span class="token punctuation">)</span>\nCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span>key<span class="token punctuation">,</span> cart<span class="token punctuation">)</span>\nCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment">// {name: &quot;apple&quot;, key: Symbol(User 信息)}</span>\nCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment">// {name: &quot;apple&quot;, key: Symbol(购物车 信息)}</span>\n</code></pre></div><h2 id="symbol-扩展性与对象属性保护" tabindex="-1"><code>Symbol</code> - 扩展性与对象属性保护 <a class="header-anchor" href="#symbol-扩展性与对象属性保护" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">let</span> sybom <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;这是一个 symbol 类型&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>sybom<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;www.baidu.com&#39;</span> <span class="token comment">// 这类的属性类似与 私有属性 - 受保护的~</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> gl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name </span>\n<span class="token punctuation">}</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name - 也打印不到~</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="如果想要遍历-对象里面的-symbol-属性" tabindex="-1">如果想要遍历 对象里面的 Symbol 属性 <a class="header-anchor" href="#如果想要遍历-对象里面的-symbol-属性" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(这是一个 symbol 类型)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 如果要遍历 对象里面的 所有属性</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name Symbol(这是一个 symbol 类型)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">let</span> site <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;这是一个 Symbol &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>site<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;gl&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">[</span>site<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">[</span>site<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gl - 李四</span>\n<span class="token comment">// 但是 这个属性是隐藏的</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> ls<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name 这样是打印不到的~</span>\n  <span class="token comment">// 如果是 对象的私有属性 不想再外部访问到 就使用 Symbol 属性来进行设置</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',19)];var e=n(o,[["render",function(n,t,p,o,e,l){return a(),s("div",null,c)}]]);export{p as __pageData,e as default};
