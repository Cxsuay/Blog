import{_ as n,c as s,o as a,a as t}from"./app.9a3fef87.js";const p='{"title":"Js - Class","description":"","frontmatter":{},"headers":[{"level":2,"title":"类的两种声明形式","slug":"类的两种声明形式"},{"level":2,"title":"类内部的工作机制其实就是原型操作","slug":"类内部的工作机制其实就是原型操作"},{"level":2,"title":"对象属性的声明","slug":"对象属性的声明"},{"level":2,"title":"class 声明的方法 为什么不能遍历","slug":"class-声明的方法-为什么不能遍历"},{"level":2,"title":"静态属性 和 静态方法的使用","slug":"静态属性-和-静态方法的使用"},{"level":2,"title":"访问器","slug":"访问器"},{"level":3,"title":"使用命名规则来保护属性","slug":"使用命名规则来保护属性"},{"level":3,"title":"使用 Symbol 来定义 protected(保护) 属性","slug":"使用-symbol-来定义-protected-保护-属性"},{"level":3,"title":"使用 weakMap 保护属性","slug":"使用-weakmap-保护属性"},{"level":3,"title":"private 私有属性使用","slug":"private-私有属性使用"},{"level":2,"title":"class 属性继承原理","slug":"class-属性继承原理"},{"level":2,"title":"super 关键字的原理","slug":"super-关键字的原理"},{"level":2,"title":"为什么子类 constructor 中会执行 super ；","slug":"为什么子类-constructor-中会执行-super-；"},{"level":2,"title":"super 总之就是原型链的攀升","slug":"super-总之就是原型链的攀升"},{"level":2,"title":"方法的重写","slug":"方法的重写"},{"level":2,"title":"静态继承的原理","slug":"静态继承的原理"},{"level":2,"title":"使用 instanceof 检测对象实现 - 对象 与 构造函数","slug":"使用-instanceof-检测对象实现-对象-与-构造函数"},{"level":2,"title":"isPrototypeOf 检测继承关系  - 对象与对象的关系","slug":"isprototypeof-检测继承关系-对象与对象的关系"},{"level":2,"title":"内置类继承的原型实现","slug":"内置类继承的原型实现"},{"level":2,"title":"mixin 混合模式使用技巧","slug":"mixin-混合模式使用技巧"}],"relativePath":"docs/Js/Class.md","lastUpdated":1632732114000}',o={},c=[t('<h1 id="js-class" tabindex="-1">Js - Class <a class="header-anchor" href="#js-class" aria-hidden="true">#</a></h1><h2 id="类的两种声明形式" tabindex="-1">类的两种声明形式 <a class="header-anchor" href="#类的两种声明形式" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 方法之间是不需要加逗号的 哈哈哈</span>\n  <span class="token comment">// 声明方法 最好使用这种方法声明  function 和 ()=&gt; 不推荐使用</span>\n  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// typeof User // function</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 这样也是可以 声明的</span>\n<span class="token comment">// --- 下面的是函数形式 ---</span>\n<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&#39;小黄&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="类内部的工作机制其实就是原型操作" tabindex="-1">类内部的工作机制其实就是原型操作 <a class="header-anchor" href="#类内部的工作机制其实就是原型操作" aria-hidden="true">#</a></h2><ul><li>类其实就是 <code>构造函数</code> 的一个语法糖结构</li></ul><div class="language-js"><pre><code>  <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 为对象做属性初始值</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 打印发现  这个方法已经自动放置在 原想prototype 上面去了</span>\n  <span class="token punctuation">}</span>\n  User <span class="token operator">===</span> <span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span> <span class="token comment">// true</span>\n  <span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Object.getOwnPropertynames 方法返回一个由 指定对象的所有自身属性的属性名</span>\n  <span class="token comment">// 包括 不可枚举</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertynames</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;name&#39;];</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertynames</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;constructor&#39;, &#39;show&#39;];</span>\n  <span class="token comment">// --- 下面的是函数形式 ---</span>\n  <span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 和上面的 constructor 一样 为每个对象独立存放属性的 - 初始化</span>\n    <span class="token comment">// 保证 每个实例对象的属性都是独有的 方法写在原型上是为了保证实例对象方法共用</span>\n    <span class="token comment">// 并且 prototype 一个对象定义 所有实例共用 不过多消耗内存 </span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  User <span class="token operator">===</span> <span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token comment">// true</span>\n</code></pre></div><h2 id="对象属性的声明" tabindex="-1">对象属性的声明 <a class="header-anchor" href="#对象属性的声明" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ⚠️注意 这是对象属性的声明</span>\n  site <span class="token operator">=</span> <span class="token string">&#39;站点i&#39;</span> <span class="token comment">// 这样也可以声明 可以修改 👇changeSite</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">changeSite</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>site <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> gl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;郭霖&#39;</span><span class="token punctuation">)</span>\ngl<span class="token punctuation">.</span><span class="token function">changeSite</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User {site: &quot;123&quot;, name: &quot;郭霖&quot;}</span>\ngl<span class="token punctuation">.</span>site <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">;</span> <span class="token comment">// User {site: &quot;aaa&quot;, name: &quot;郭霖&quot;}</span>\n</code></pre></div><h2 id="class-声明的方法-为什么不能遍历" tabindex="-1">class 声明的方法 为什么不能遍历 <a class="header-anchor" href="#class-声明的方法-为什么不能遍历" aria-hidden="true">#</a></h2><ul><li><p>添加到函数原型到方法 (User.prototype.show = function() {}) 如果没有设置具体特征(枚举)的时候是可以 <code>in</code> 遍历出来的</p></li><li><p>如果指向当前遍历的 那就是 Object.hasOwnProperty(key);</p></li><li><p>使用<strong>类</strong>的时候 会自动添加 不可枚举的 特性。</p><p>⚠️ 推荐使用 严格模式下 编写代码 <code>class</code> 编写代码 默认就是 严格模式</p></li></ul><h2 id="静态属性-和-静态方法的使用" tabindex="-1">静态属性 和 静态方法的使用 <a class="header-anchor" href="#静态属性-和-静态方法的使用" aria-hidden="true">#</a></h2><ul><li>静态属性</li></ul><div class="language-js"><pre><code>  <span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这个是 构造函数 生成对象的独有属性</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 因为函数是对象 所以可以点属性 分配给构造函数点属性 称为静态属性</span>\n  Web<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> <span class="token comment">// 这个是函数对象点 是函数独有的属性 只属于函数 静态属性的使用</span>\n  <span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">&#39;333&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// --- 下面的是class形式 ---</span>\n\n  <span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token punctuation">{</span>\n    url <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> <span class="token comment">// 这个是 实例属性</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment">// 这个也是 实力属性 一般 这样定义的比较多</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> url <span class="token operator">=</span> <span class="token string">&#39;222&#39;</span> <span class="token comment">// 这个是 类独有的 静态属性 了</span>\n    <span class="token comment">// Web.url 这个访问静态属性的方式</span>\n    <span class="token comment">// 这个 属性是所有对象 共用的 那就可以定义成 静态属性 因为只保存一份 保存在 类 当中</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><ul><li>静态方法</li></ul><div class="language-js"><pre><code>  <span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 其实 动态方法 也是 this.show = function() {} 但这样就每个对象都创建了</span>\n  <span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 原先的动态方法 - 这样也是保存了一份 定义到 prototype 上了</span>\n  User<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 因为函数也是对象 这样定义函数的方法就是静态方法</span>\n  User<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> User<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token comment">// 这样this 也是User</span>\n\n  <span class="token comment">// --- 下面的是class形式 ---</span>\n\n  <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;动态方法&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;静态方法&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 推荐这样 使用类 就是为了更便捷和好识别</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  User<span class="token punctuation">.</span>__proto<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;静态方法&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token comment">// 这样不推荐</span>\n</code></pre></div><div class="language-js"><pre><code>  <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 展开语法 可以接受 不定数量的参数</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">this</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment">// new this 是因为 this 就是声明 当前的 类</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> gl <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;郭霖&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 静态方法的调用</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span> <span class="token comment">// User {name: &quot;郭霖&quot;} </span>\n</code></pre></div><ul><li>静态属性 - 方法 （<strong>练习</strong>）</li></ul><div class="language-js"><pre><code>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span>\n      price<span class="token operator">:</span> <span class="token number">87</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span>\n      price<span class="token operator">:</span> <span class="token number">98</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">class</span> <span class="token class-name">Lesson</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> data<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span>price\n    <span class="token punctuation">}</span>\n    <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span>name\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 或者也可以这样写 改成属性的方式</span>\n    <span class="token keyword">get</span> <span class="token function">nama1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span>name\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 静态方法 就是我们不是对 单个对象进行管理的 这样使用静态方法就比较了</span>\n    <span class="token keyword">static</span> <span class="token function">createBatch</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Lesson</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历 然后返回 实例</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">maxPrice</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// a.price() 是可以调用 实例方法的</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果不是对单个对象操作的 就可以使用静态方法</span>\n      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> t <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> obj1 <span class="token operator">=</span> mew <span class="token function">Lesson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> Lessons <span class="token operator">=</span> Lesson<span class="token punctuation">.</span><span class="token function">createBatch</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 课程的集合</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Lessons&#39;</span><span class="token punctuation">,</span> Lessons<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lesson<span class="token punctuation">.</span><span class="token function">maxPrice</span><span class="token punctuation">(</span>Lessons<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// js 这样是可以调用的 因为也是对象的方法 this.name()</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lesson<span class="token punctuation">.</span><span class="token function">maxPrice</span><span class="token punctuation">(</span>Lessons<span class="token punctuation">)</span><span class="token punctuation">.</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// js 如果改成访问器的名字 就可以不需要写括号了 本质上当作属性访问</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lesson<span class="token punctuation">.</span><span class="token function">totalPrice</span><span class="token punctuation">(</span>Lessons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// FIXME:  如果是对单个对象操作的话 就不能使用静态方法了</span>\n</code></pre></div><h2 id="访问器" tabindex="-1">访问器 <a class="header-anchor" href="#访问器" aria-hidden="true">#</a></h2><ul><li><p>有时候我们直接修改属性 可能会带来一些问题 这个时候我么可以使用访问器来访问</p></li><li><p>getters setters 对属性的设置和获取 都是使用函数来进行操作的</p></li></ul><div class="language-js"><pre><code>  <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n    <span class="token function">constuctor</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>_host <span class="token operator">=</span> url<span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>\n        url\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">set</span> <span class="token function">host</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// if (...) { ... }</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> url<span class="token punctuation">;</span> <span class="token comment">// 这样就造成死循环了 因为我们有设置了</span>\n      <span class="token comment">// 解决办法 - 这两种方法 都是可以的</span>\n      <span class="token comment">// 我们 可以加一个变量符号_ 表示私有变量（受保护） 或者 用一个对象包裹</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>_host <span class="token operator">=</span> url<span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">get</span> <span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_host<span class="token punctuation">;</span>\n      rertun <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>url<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 访问器 其实就是 添加一个自定义验证的 保护措施或者验证措施</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  aa<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="使用命名规则来保护属性" tabindex="-1">使用命名规则来保护属性 <a class="header-anchor" href="#使用命名规则来保护属性" aria-hidden="true">#</a></h3><ul><li><p>个人理解 高内聚 和 低耦合</p><p>高内聚 就是 我们暴漏出几个配置 但是具体怎么实现 我们不告诉</p><p>低耦合 就是 我们尽可能的 让每个模块 各司其职 不搞串联</p></li></ul><div class="language-js"><pre><code>  \t<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n  \t  _url <span class="token operator">=</span> <span class="token string">&#39;https://www.baidu.com&#39;</span>\n  \t  <span class="token keyword">set</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \t    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?:</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \t      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;网址不符合规范&#39;</span><span class="token punctuation">)</span>\n  \t    <span class="token punctuation">}</span>\n  \t    <span class="token keyword">this</span><span class="token punctuation">.</span>_url <span class="token operator">=</span> url<span class="token punctuation">;</span>\n  \t  <span class="token punctuation">}</span>\n  \t<span class="token punctuation">}</span>\n  \t<span class="token keyword">let</span> bb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \tbb<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&#39;wangyi.com&#39;</span> <span class="token comment">// ❌ Uncaught Error: 网址不符合规范 </span>\n  \tbb<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&#39;https://wangyi.com&#39;</span> <span class="token comment">// ✅ B {_url: &quot;https://wangyi.com&quot;}</span>\n</code></pre></div><h3 id="使用-symbol-来定义-protected-保护-属性" tabindex="-1">使用 <code>Symbol</code> 来定义 protected(保护) 属性 <a class="header-anchor" href="#使用-symbol-来定义-protected-保护-属性" aria-hidden="true">#</a></h3><ul><li>唯一值 受保护的属性 不让呗设置的属性 可以使用 Symbol</li></ul><div class="language-js"><pre><code>\t\t<span class="token keyword">const</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>\n\t\t  <span class="token comment">// 这样就 相当于 我们对象的属性 但是我们想要使用的 Symbol 的值</span>\n\t\t  <span class="token comment">// HOST = &#39;123&#39; // ❌</span>\n\t\t  <span class="token comment">// 需要这样定义的 Symbol值 是唯一的</span>\n\t\t  <span class="token punctuation">[</span><span class="token constant">HOST</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>\n\t\t  <span class="token keyword">set</span> <span class="token function">host</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t      <span class="token operator">...</span>\n\t\t    <span class="token punctuation">}</span>\n\t\t    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">HOST</span><span class="token punctuation">]</span> <span class="token operator">=</span> url<span class="token punctuation">;</span> <span class="token comment">// ⚠️ 一定要加 中括号</span>\n\t\t  <span class="token punctuation">}</span>\n\t\t  <span class="token keyword">get</span> <span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">HOST</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t  <span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">let</span> cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">// 子类 也可以用 Symbol 的值</span>\n\t\t<span class="token comment">// 子类 使用了super() 会调用 父类的 constructor</span>\n\t\t<span class="token comment">// 在类以及子类中 是可以使用的 继承之后 一定要调用 super();</span>\n\n\t\t<span class="token comment">// 如果想要定义 多个值</span>\n\t\t<span class="token keyword">const</span> protecteds <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">class</span> <span class="token class-name">Common</span> <span class="token punctuation">{</span>\n\t\t  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t    <span class="token keyword">this</span><span class="token punctuation">[</span>protecteds<span class="token punctuation">]</span><span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>\n\t\t  <span class="token punctuation">}</span>\n\t\t  set<span class="token operator">...</span>\n\t\t    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>protecteds<span class="token punctuation">]</span><span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token string">&#39;223&#39;</span><span class="token punctuation">;</span>\n\t\t  get<span class="token operator">...</span>\n\t\t    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>protecteds<span class="token punctuation">]</span><span class="token punctuation">.</span>host\n\t\t<span class="token punctuation">}</span>\n</code></pre></div><h3 id="使用-weakmap-保护属性" tabindex="-1">使用 weakMap 保护属性 <a class="header-anchor" href="#使用-weakmap-保护属性" aria-hidden="true">#</a></h3><ul><li>WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。</li></ul><div class="language-js"><pre><code>  \t<span class="token comment">// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap</span>\n  \t<span class="token comment">// WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。</span>\n  \t<span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \t<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \t<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token punctuation">{</span>\n  \t  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \t    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  \t    host<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 赋 初始值</span>\n  \t  <span class="token punctuation">}</span>\n  \t  <span class="token keyword">set</span> <span class="token function">host</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n  \t  <span class="token comment">// obj.set(this, { // 多个值</span>\n  \t  <span class="token comment">//   ...obj.get(this),</span>\n  \t  <span class="token comment">//   host: url,</span>\n  \t  <span class="token comment">// })</span>\n  \t  <span class="token keyword">get</span> <span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \t    <span class="token keyword">return</span> host<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \t    <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;host&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  \t  <span class="token punctuation">}</span>\n  \t<span class="token punctuation">}</span>\n  \t<span class="token keyword">let</span> dd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="private-私有属性使用" tabindex="-1">private 私有属性使用 <a class="header-anchor" href="#private-私有属性使用" aria-hidden="true">#</a></h3><ul><li>公共属性(public) 在类的内部 外部是都可以访问的 包括子类</li><li>受保护的属性(protected) 就是类以及子类 可以访问的 外部不可以访问</li><li>私有属性(private) 只属于当前类 子类都不可以访问 (只属于自己)</li></ul><div class="language-js"><pre><code>  <span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token punctuation">{</span>\n    #host <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 加个 # 就是表示这个是 私有属性</span>\n    <span class="token comment">// 如果想要修改 就是设置一个 get set 访问器 进行修改和访问</span>\n    <span class="token comment">// 这两种都是设置 私有方法的 方式</span>\n    <span class="token function">#check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token function-variable function">#check</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 方法其实就是一个属性 然后值是函数 本质还是属性</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 继承里面是不可以 设置和获取私有属性的</span>\n  `\n</code></pre></div><h2 id="class-属性继承原理" tabindex="-1">class 属性继承原理 <a class="header-anchor" href="#class-属性继承原理" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token constant">F1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 属性继承</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 原来函数的继承</span>\n<span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 方法继承</span>\n<span class="token comment">// ------- class 形式 ----------</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;哈哈哈&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> admin1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token string">&#39;测试&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处打印了 123。使用super() 就是调用了父类的 构造函数</span>\nadmin1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 哈哈哈</span>\n<span class="token comment">// 方法是所有对象共享的。始终是在原型对象上的 属性是每个对象独有的 所以 this.属性 就可以了</span>\n</code></pre></div><h2 id="super-关键字的原理" tabindex="-1"><code>super</code> 关键字的原理 <a class="header-anchor" href="#super-关键字的原理" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;User show&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Admin.show&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// User show, Admin show</span>\n</code></pre></div><ul><li><code>super</code> 关键字解决了 多层调用的问题 上面的this 还是打印的 <code>gg</code><code>super</code> 用来作为原型攀升。 <code>this</code> 还是原来调用的时候的 <code>this</code></li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;g.name&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> gg <span class="token operator">=</span> <span class="token punctuation">{</span>\n  __proto__<span class="token operator">:</span> g<span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gg.name&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// g.name 这里的话 this.__proto__ 调用所以 上面的show this还是指向的g</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// gg.name 这里就改变了 this 之后 打印的 类似是实现了 super的操作机制</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// gg.name</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ⚠️ 这样写 super() 是不行的 声明成函数是不可以的</span>\n  <span class="token comment">// say(){} 这也是我们在类中 这样写的原因</span>\n  <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\ngg<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li><p>如果是多重继承的话 <code> this.__proto__.show.call(this)</code> 这样 <code>this</code> 一直指向 <code>gg</code> 所以 死循环了</p><p>可以使用 <code>super.show()</code></p></li></ul><h2 id="为什么子类-constructor-中会执行-super-；" tabindex="-1">为什么子类 <code>constructor</code> 中会执行 <code>super</code> ； <a class="header-anchor" href="#为什么子类-constructor-中会执行-super-；" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果继承了之后 不调用 super 就会报错</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment">// 这里传递参数的用意就是 继承过来的属性 初始化</span>\n    <span class="token comment">// 必须写在 this 之前去调用 super</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 因为我们继承之后 子类使用的初衷还是 子类的优先级 &gt; 父级</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="super-总之就是原型链的攀升" tabindex="-1"><code>super</code> 总之就是原型链的攀升 <a class="header-anchor" href="#super-总之就是原型链的攀升" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b sum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果使用 super 后面没有跟方法的时候 调用父类的 constructor</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这样调用的 this 还是指向 Admin</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\na<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// b sum</span>\n</code></pre></div><h2 id="方法的重写" tabindex="-1">方法的重写 <a class="header-anchor" href="#方法的重写" aria-hidden="true">#</a></h2><ul><li>就是子类调用子类 自己的方法 来覆盖和父类重名的方法</li><li>扩展 子类调用 父类的方法 来扩展自己的方法 完成重写 <code>super.xx()</code></li></ul><h2 id="静态继承的原理" tabindex="-1">静态继承的原理 <a class="header-anchor" href="#静态继承的原理" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nUser<span class="token punctuation">.</span>site <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>\nUser<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nAdmin<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> User<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Admin<span class="token punctuation">.</span>site<span class="token punctuation">)</span> <span class="token comment">// 123</span>\n\n<span class="token comment">// -----------------------</span>\n\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> site <span class="token operator">=</span> <span class="token string">&#39;213&#39;</span>\n  <span class="token keyword">static</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;user show&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nAdmin<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// user show</span>\n</code></pre></div><ul><li>静态方法是 通用 的里面不能有对象数据 如果有对象数据 那就不通用了</li></ul><h2 id="使用-instanceof-检测对象实现-对象-与-构造函数" tabindex="-1">使用 <code>instanceof</code> 检测对象实现 - 对象 与 构造函数 <a class="header-anchor" href="#使用-instanceof-检测对象实现-对象-与-构造函数" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\na <span class="token keyword">instanceof</span> <span class="token class-name">Admin</span> <span class="token comment">// true</span>\na <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token comment">// true</span>\n</code></pre></div><ul><li>递归调用 实现原型链之间的判断 - 实现 instanceof</li></ul><div class="language-js"><pre><code>  \t<span class="token keyword">function</span> <span class="token function">checkPrototype</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> cn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \t  obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n  \t  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  \t  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> con<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n  \t  <span class="token keyword">return</span> <span class="token function">checkPrototype</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \t<span class="token punctuation">}</span>\n  \tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">checkPrototype</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> Admin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n  \tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">checkPrototype</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> User<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n  \t<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  \t<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  \t<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n  \tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Admin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h2 id="isprototypeof-检测继承关系-对象与对象的关系" tabindex="-1">isPrototypeOf 检测继承关系 - 对象与对象的关系 <a class="header-anchor" href="#isprototypeof-检测继承关系-对象与对象的关系" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token comment">// a.isPrototypeOf(b)  b对象是否是由a对象实现的</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> ad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>ad<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h2 id="内置类继承的原型实现" tabindex="-1">内置类继承的原型实现 <a class="header-anchor" href="#内置类继承的原型实现" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Arr</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  args<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">first</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">max</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Arr</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\na<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 35</span>\n\n<span class="token comment">// ---------------------- class 形式 -------------------</span>\n<span class="token comment">// 这样就是增强内置类 在原有的内置类里面可以重写和增加一些新的方法</span>\n<span class="token keyword">class</span> <span class="token class-name">Arr1</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果是这样结构的话 不写 constructor 也是可以的 会自动生成</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Arr1(4) [1, 2, 3, 35]</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">===</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arr1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 31</span>\na1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// a1.push() // 重写了</span>\n<span class="token comment">// a1 也是可以直接调用 数组 它所有的方法的</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="mixin-混合模式使用技巧" tabindex="-1">mixin 混合模式使用技巧 <a class="header-anchor" href="#mixin-混合模式使用技巧" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">let</span> Tool <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">max</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;哈哈哈&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Lesson</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">lessons</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>lessons <span class="token operator">=</span> lessons<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token number">100</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;node&#39;</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token number">90</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\nObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Lesson</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> Tool<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> les <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lesson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\nles<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 哈哈哈</span>\n</code></pre></div>',59)];var e=n(o,[["render",function(n,t,p,o,e,u){return a(),s("div",null,c)}]]);export{p as __pageData,e as default};
